<?xml version="1.0"?>
<ns0:data-stream-collection xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ns0="http://scap.nist.gov/schema/scap/source/1.2" xmlns:ns1="http://www.w3.org/1999/xlink" xmlns:ns10="http://checklists.nist.gov/xccdf/1.2" xmlns:ns13="http://cpe.mitre.org/dictionary/2.0" xmlns:ns2="urn:oasis:names:tc:entity:xmlns:xml:catalog" xmlns:ns3="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ns5="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:ns6="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" xmlns:ns7="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix" xmlns:ns8="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux" xmlns:ns9="http://scap.nist.gov/schema/ocil/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="scap_org.open-scap_collection_from_xccdf_ssg-jre-xccdf-1.2.xml" schematron-version="1.3">
  <ns0:data-stream id="scap_org.open-scap_datastream_from_xccdf_ssg-jre-xccdf-1.2.xml" scap-version="1.3" use-case="OTHER">
    <ns0:dictionaries>
      <ns0:component-ref id="scap_org.open-scap_cref_ssg-jre-cpe-dictionary.xml" ns1:href="#scap_org.open-scap_comp_ssg-jre-cpe-dictionary.xml">
        <ns2:catalog>
          <ns2:uri name="ssg-jre-cpe-oval.xml" uri="#scap_org.open-scap_cref_ssg-jre-cpe-oval.xml"/>
        </ns2:catalog>
      </ns0:component-ref>
    </ns0:dictionaries>
    <ns0:checklists>
      <ns0:component-ref id="scap_org.open-scap_cref_ssg-jre-xccdf-1.2.xml" ns1:href="#scap_org.open-scap_comp_ssg-jre-xccdf-1.2.xml">
        <ns2:catalog>
          <ns2:uri name="ssg-jre-oval.xml" uri="#scap_org.open-scap_cref_ssg-jre-oval.xml"/>
          <ns2:uri name="ssg-jre-ocil.xml" uri="#scap_org.open-scap_cref_ssg-jre-ocil.xml"/>
        </ns2:catalog>
      </ns0:component-ref>
    </ns0:checklists>
    <ns0:checks>
      <ns0:component-ref id="scap_org.open-scap_cref_ssg-jre-oval.xml" ns1:href="#scap_org.open-scap_comp_ssg-jre-oval.xml"/>
      <ns0:component-ref id="scap_org.open-scap_cref_ssg-jre-ocil.xml" ns1:href="#scap_org.open-scap_comp_ssg-jre-ocil.xml"/>
      <ns0:component-ref id="scap_org.open-scap_cref_ssg-jre-cpe-oval.xml" ns1:href="#scap_org.open-scap_comp_ssg-jre-cpe-oval.xml"/>
    </ns0:checks>
  </ns0:data-stream>
  <ns0:component id="scap_org.open-scap_comp_ssg-jre-oval.xml" timestamp="2019-11-28T04:51:23">
    <ns3:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <ns3:generator>
        <ns5:product_name>combine_ovals.py from SCAP Security Guide</ns5:product_name>
        <ns5:product_version>ssg: [0, 1, 47], python: 2.7.5</ns5:product_version>
        <ns5:schema_version>5.11</ns5:schema_version>
        <ns5:timestamp>2019-11-28T04:47:18</ns5:timestamp>
      </ns3:generator>
      <ns3:definitions>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_configure_crypto_policy:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Configure JRE to use System Crypto Policy.</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>JRE should be configured to use the system-wide crypto policy setting.</ns3:description>
            <ns3:reference ref_id="java_jre_configure_crypto_policy" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check that the configuration mandates usage of system-wide crypto policies." test_ref="oval:ssg-test_java_jre_configure_crypto_policy:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_deployment_properties_exists:def:1" version="1">
          <ns3:metadata>
            <ns3:title>The Java Properties File Exists</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>A properties file must be present to hold all the keys
      that establish properties within the Java control panel.</ns3:description>
            <ns3:reference ref_id="java_jre_deployment_properties_exists" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.properties file" test_ref="oval:ssg-test_java_jre_deployment_properties:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_untrusted_sources:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Disable Java Execution From Untrusted Sources</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The dialog to enable users to grant permissions to execute
      signed content from an un-trusted authority must be disabled.</ns3:description>
            <ns3:reference ref_id="java_jre_untrusted_sources" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.askgrantdialog.notinca" test_ref="oval:ssg-test_java_jre_untrusted_sources:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_untrusted_sources_locked:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Disable User Access to Untrusted Sources Setting</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The dialog enabling users to grant permissions to execute signed
      content from an un-trusted authority must be locked.</ns3:description>
            <ns3:reference ref_id="java_jre_untrusted_sources_locked" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.askgrantdialog.notinca.locked" test_ref="oval:ssg-test_java_jre_untrusted_sources_locked:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_validation_crl:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Enable Revocation Checks for Publisher Certificates</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The setting for users to check publisher certificates
      for revocation must be enabled.</ns3:description>
            <ns3:reference ref_id="java_jre_validation_crl" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.validation.crl" test_ref="oval:ssg-test_java_jre_validation_crl:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_validation_crl_locked:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Disable User Access to Revocation Check Settings</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The setting enabling users to configure the check publisher
      certificates for revocation must be locked.</ns3:description>
            <ns3:reference ref_id="java_jre_validation_crl_locked" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.validation.crl.locked" test_ref="oval:ssg-test_java_jre_validation_crl_locked:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_validation_ocsp:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Enable Online Certificate Validation</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The option to enable online certificate validation
      must be enabled.</ns3:description>
            <ns3:reference ref_id="java_jre_validation_ocsp" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.validation.ocsp" test_ref="oval:ssg-test_java_jre_validation_ocsp:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_validation_ocsp_locked:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Disable User Access to Online Certificate Validation Settings</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The option to enable online certificate
      validation must be locked.</ns3:description>
            <ns3:reference ref_id="java_jre_validation_ocsp_locked" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.security.validation.ocsp.locked" test_ref="oval:ssg-test_java_jre_validation_ocsp_locked:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_deployment_config_exists:def:1" version="1">
          <ns3:metadata>
            <ns3:title>The Java Configuration File Exists</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>A configuration file must be present to deploy properties for JRE.</ns3:description>
            <ns3:reference ref_id="java_jre_deployment_config_exists" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.config file" test_ref="oval:ssg-test_java_jre_deployment_config_exists:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_deployment_config_mandatory:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Configure The Java Deployment Mandatory Setting</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The configuration file must contain proper keys and values to
      deploy settings correctly.</ns3:description>
            <ns3:reference ref_id="java_jre_deployment_config_mandatory" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.system.config.mandatory" test_ref="oval:ssg-test_java_jre_deployment_system_config_mandatory:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="compliance" id="oval:ssg-java_jre_deployment_config_properties:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Configure the deployment.properties File Path</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:description>The configuration file must contain proper keys and values to
      deploy settings correctly.</ns3:description>
            <ns3:reference ref_id="java_jre_deployment_config_properties" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria>
            <ns3:criterion comment="Check deployment.system.config" test_ref="oval:ssg-test_java_jre_deployment_system_config:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
        <ns3:definition class="inventory" id="oval:ssg-installed_app_is_java:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Java Runtime Environment</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:reference ref_id="installed_app_is_java" source="CPE"/>
            <ns3:description>The application installed on the system is Java.</ns3:description>
            <ns3:reference ref_id="installed_app_is_java" source="ssg"/>
          </ns3:metadata>
          <ns3:criteria operator="OR">
            <ns3:criterion comment="Oracle Java is installed" test_ref="oval:ssg-test_oracle_java:tst:1"/>
            <ns3:criterion comment="Oracle Java from Red Hat" test_ref="oval:ssg-test_oracle_java_rhel:tst:1"/>
            <ns3:criterion comment="IBM Java is installed" test_ref="oval:ssg-test_ibm_java:tst:1"/>
            <ns3:criterion comment="IBM Java from Red Hat" test_ref="oval:ssg-test_ibm_java_rhel:tst:1"/>
            <ns3:criterion comment="Sun Java from Red Hat" test_ref="oval:ssg-test_sun_java_rhel:tst:1"/>
            <ns3:criterion comment="OpenJDK is installed" test_ref="oval:ssg-test_openjdk_java:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
      </ns3:definitions>
      <ns3:tests>
        <ns6:textfilecontent54_test check="all" check_existence="all_exist" comment="Check that the configuration mandates usage of system-wide crypto policies." id="oval:ssg-test_java_jre_configure_crypto_policy:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_configure_crypto_policy:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns7:file_test check="all" comment="Check deployment.properties file" id="oval:ssg-test_java_jre_deployment_properties:tst:1" version="1">
          <ns7:object object_ref="oval:ssg-object_java_jre_deployment_properties:obj:1"/>
        </ns7:file_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.askgrantdialog.notinca" id="oval:ssg-test_java_jre_untrusted_sources:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_untrusted_sources:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.askgrantdialog.notinca.lock" id="oval:ssg-test_java_jre_untrusted_sources_locked:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_untrusted_sources_locked:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.validation.crl" id="oval:ssg-test_java_jre_validation_crl:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_validation_crl:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.validation.crl.locked" id="oval:ssg-test_java_jre_validation_crl_locked:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_validation_crl_locked:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.validation.ocsp" id="oval:ssg-test_java_jre_validation_ocsp:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_validation_ocsp:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.security.validation.ocsp.locked" id="oval:ssg-test_java_jre_validation_ocsp_locked:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_validation_ocsp_locked:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns7:file_test check="all" comment="Check deployment.config file" id="oval:ssg-test_java_jre_deployment_config_exists:tst:1" version="1">
          <ns7:object object_ref="oval:ssg-object_java_jre_deployment_config_exists:obj:1"/>
        </ns7:file_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.system.config.mandatory" id="oval:ssg-test_java_jre_deployment_system_config_mandatory:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_deployment_system_config_mandatory:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns6:textfilecontent54_test check="all" comment="Check deployment.system.config" id="oval:ssg-test_java_jre_deployment_system_config:tst:1" version="1">
          <ns6:object object_ref="oval:ssg-object_java_jre_deployment_system_config:obj:1"/>
        </ns6:textfilecontent54_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Oracle JRE is installed" id="oval:ssg-test_oracle_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_oracle_java:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Oracle JRE from Red Hat is installed" id="oval:ssg-test_oracle_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_oracle_java_rhel:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="IBM JRE is installed" id="oval:ssg-test_ibm_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_ibm_java:obj:1"/>
          <ns8:state state_ref="oval:ssg-state_ibm_java:ste:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="IBM JRE from Red Hat is installed" id="oval:ssg-test_ibm_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_ibm_java_rhel:obj:1"/>
          <ns8:state state_ref="oval:ssg-state_ibm_java_rhel:ste:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Sun JRE from Red Hat is installed" id="oval:ssg-test_sun_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_sun_java_rhel:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Red Hat OpenJDK is installed" id="oval:ssg-test_openjdk_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_openjdk_java:obj:1"/>
        </ns8:rpminfo_test>
      </ns3:tests>
      <ns3:objects>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_configure_crypto_policy:obj:1" version="1">
          <ns6:filepath>/usr/lib/jvm/jre/lib/security/java.security</ns6:filepath>
          <ns6:pattern operation="pattern match">^\s*security.useSystemPropertiesFile=true\s*$</ns6:pattern>
          <ns6:instance datatype="int" operation="greater than or equal">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns7:file_object id="oval:ssg-object_java_jre_deployment_properties:obj:1" version="1">
          <ns7:filepath>/etc/.java/deployment/deployment.properties</ns7:filepath>
        </ns7:file_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_untrusted_sources:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.askgrantdialog.notinca=false$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_untrusted_sources_locked:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.askgrantdialog.notinca.locked$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_validation_crl:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.validation.crl=true$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_validation_crl_locked:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.validation.crl.locked$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_validation_ocsp:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.validation.ocsp=true$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_validation_ocsp_locked:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.properties</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.security.validation.ocsp.locked$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns7:file_object id="oval:ssg-object_java_jre_deployment_config_exists:obj:1" version="1">
          <ns7:filepath>/etc/.java/deployment/deployment.config</ns7:filepath>
        </ns7:file_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_deployment_system_config_mandatory:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.config</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.system.config.mandatory=false$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns6:textfilecontent54_object id="oval:ssg-object_java_jre_deployment_system_config:obj:1" version="1">
          <ns6:filepath>/etc/.java/deployment/deployment.config</ns6:filepath>
          <ns6:pattern operation="pattern match">^deployment.system.config=file:///etc/.java/deployment/deployment.properties$</ns6:pattern>
          <ns6:instance datatype="int">1</ns6:instance>
        </ns6:textfilecontent54_object>
        <ns8:rpminfo_object id="oval:ssg-obj_oracle_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^jre.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_oracle_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*oracle.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_ibm_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^ibm-java.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_ibm_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*ibm.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_sun_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*sun.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_openjdk_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*openjdk.*$</ns8:name>
        </ns8:rpminfo_object>
      </ns3:objects>
      <ns3:states>
        <ns8:rpminfo_state id="oval:ssg-state_ibm_java:ste:1" version="1">
          <ns8:evr datatype="evr_string" operation="greater than or equal">.*1.6.0.*</ns8:evr>
        </ns8:rpminfo_state>
        <ns8:rpminfo_state id="oval:ssg-state_ibm_java_rhel:ste:1" version="1">
          <ns8:evr datatype="evr_string" operation="greater than or equal">.*1.6.0.*</ns8:evr>
        </ns8:rpminfo_state>
      </ns3:states>
    </ns3:oval_definitions>
  </ns0:component>
  <ns0:component id="scap_org.open-scap_comp_ssg-jre-ocil.xml" timestamp="2019-11-28T04:51:23">
    <ns9:ocil>
      <ns9:generator>
        <ns9:product_name>xccdf-create-ocil.xslt from SCAP Security Guide</ns9:product_name>
        <ns9:product_version>ssg: 0.1.47</ns9:product_version>
        <ns9:schema_version>2.0</ns9:schema_version>
        <ns9:timestamp>2019-11-28T04:47:19Z</ns9:timestamp>
      </ns9:generator>
      <ns9:questionnaires>
        <ns9:questionnaire id="ocil:ssg-java_jre_configure_crypto_policy_ocil:questionnaire:1">
          <ns9:title>Configure Java Runtime to use System Crypto Policy</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_configure_crypto_policy_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_validation_ocsp_locked_ocil:questionnaire:1">
          <ns9:title>Disable User Access to Online Certificate Validation Settings</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_validation_ocsp_locked_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_validation_crl_locked_ocil:questionnaire:1">
          <ns9:title>Disable User Access to Revocation Check Settings</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_validation_crl_locked_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_deployment_properties_exists_ocil:questionnaire:1">
          <ns9:title>The Java Properties File Exists</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_deployment_properties_exists_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_untrusted_sources_locked_ocil:questionnaire:1">
          <ns9:title>Disable User Access to Untrusted Sources Settings</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_untrusted_sources_locked_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_untrusted_sources_ocil:questionnaire:1">
          <ns9:title>Disable Java Execution From Untrusted Sources</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_untrusted_sources_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_validation_crl_ocil:questionnaire:1">
          <ns9:title>Enable Revocation Checks for Publisher Certificates</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_validation_crl_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_updated_ocil:questionnaire:1">
          <ns9:title>Ensure Java Patches Installed</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_updated_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_validation_ocsp_ocil:questionnaire:1">
          <ns9:title>Enable Online Certificate Validation</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_validation_ocsp_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_deployment_config_properties_ocil:questionnaire:1">
          <ns9:title>Configure the deployment.properties File Path</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_deployment_config_properties_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_deployment_config_mandatory_ocil:questionnaire:1">
          <ns9:title>Configure The Java Deployment Mandatory Setting</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_deployment_config_mandatory_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
        <ns9:questionnaire id="ocil:ssg-java_jre_deployment_config_exists_ocil:questionnaire:1">
          <ns9:title>The Java Configuration File Exists</ns9:title>
          <ns9:actions>
            <ns9:test_action_ref>ocil:ssg-java_jre_deployment_config_exists_action:testaction:1</ns9:test_action_ref>
          </ns9:actions>
        </ns9:questionnaire>
      </ns9:questionnaires>
      <ns9:test_actions>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_configure_crypto_policy_action:testaction:1" question_ref="ocil:ssg-java_jre_configure_crypto_policy_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_validation_ocsp_locked_action:testaction:1" question_ref="ocil:ssg-java_jre_validation_ocsp_locked_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_validation_crl_locked_action:testaction:1" question_ref="ocil:ssg-java_jre_validation_crl_locked_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_deployment_properties_exists_action:testaction:1" question_ref="ocil:ssg-java_jre_deployment_properties_exists_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_untrusted_sources_locked_action:testaction:1" question_ref="ocil:ssg-java_jre_untrusted_sources_locked_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_untrusted_sources_action:testaction:1" question_ref="ocil:ssg-java_jre_untrusted_sources_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_validation_crl_action:testaction:1" question_ref="ocil:ssg-java_jre_validation_crl_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_updated_action:testaction:1" question_ref="ocil:ssg-java_jre_updated_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_validation_ocsp_action:testaction:1" question_ref="ocil:ssg-java_jre_validation_ocsp_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_deployment_config_properties_action:testaction:1" question_ref="ocil:ssg-java_jre_deployment_config_properties_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_deployment_config_mandatory_action:testaction:1" question_ref="ocil:ssg-java_jre_deployment_config_mandatory_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
        <ns9:boolean_question_test_action id="ocil:ssg-java_jre_deployment_config_exists_action:testaction:1" question_ref="ocil:ssg-java_jre_deployment_config_exists_question:question:1">
          <ns9:when_true>
            <ns9:result>PASS</ns9:result>
          </ns9:when_true>
          <ns9:when_false>
            <ns9:result>FAIL</ns9:result>
          </ns9:when_false>
        </ns9:boolean_question_test_action>
      </ns9:test_actions>
      <ns9:questions>
        <ns9:boolean_question id="ocil:ssg-java_jre_configure_crypto_policy_question:question:1">
          <ns9:question_text>To verify that Java uses the system crypto policy, check out that the respective JRE config file
/usr/lib/jvm/jre/lib/security/java.security contains the security.useSystemPropertiesFile=true line:
grep 'security.useSystemPropertiesFile=true' /usr/lib/jvm/jre/lib/security/java.security.
      Is it the case that the &lt;pre&gt;java.security&lt;/pre&gt; doesn't contain the &lt;pre&gt;security.useSystemPropertiesFile=true&lt;/pre&gt; line?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_validation_ocsp_locked_question:question:1">
          <ns9:question_text>To verify that users cannot change online certificate verification,
run the following command:
$ grep 'validation.ocsp.locked' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.validation.ocsp.locked
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_validation_crl_locked_question:question:1">
          <ns9:question_text>To verify that users cannot change revocation check settings,
run the following command:
$ grep 'validation.crl.locked' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.validation.crl.locked
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_deployment_properties_exists_question:question:1">
          <ns9:question_text>To verify that the deployment.properties file exists,
run the following command:
$ ls /etc/.java/deployment
The output should contain:
deployment.properties
      Is it the case that it does not exist?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_untrusted_sources_locked_question:question:1">
          <ns9:question_text>To verify that users cannot change the untrusted sources settings,
run the following command:
$ grep 'askgrantdialog.notinca.locked' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.askgrantdialog.notinca.locked
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_untrusted_sources_question:question:1">
          <ns9:question_text>To verify that Java cannot execute from untrusted sources,
run the following command:
$ grep 'askgrantdialog.notinca=false' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.askgrantdialog.notinca=false
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_validation_crl_question:question:1">
          <ns9:question_text>To verify that revocation checks are enabled, run the following command:
$ grep 'validation.crl=true' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.validation.crl=true
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_updated_question:question:1">
          <ns9:question_text>If the system is joined to the Red Hat Network, a Red Hat Satellite Server, or
a yum server which provides updates, invoking the following command will
indicate if updates are available:
$ sudo yum check-update
If the system is not configured to update from one of these sources,
run the following command to list when each package was last updated:
$ rpm -qa -last
Compare this to Red Hat Security Advisories (RHSA) listed at

    https://access.redhat.com/security/updates/active/https://access.redhat.com/security/updates/active/
to determine if the system is missing applicable updates.
      Is it the case that it is not updated?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_validation_ocsp_question:question:1">
          <ns9:question_text>To verify that online certificate verification is enabled,
run the following command:
$ grep 'validation.ocsp=true' /etc/.java/deployment/deployment.properties
If properly configured, the output should return:
deployment.security.validation.ocsp=true
      Is it the case that it does not exist or is not configured properly?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_deployment_config_properties_question:question:1">
          <ns9:question_text>To verify that deployment.config is configured properly,
run the following command:
$ grep 'deployment.system.config=file' /etc/.java/deployment/deployment.config
If properly configured, the output should return:
deployment.system.config=file:///etc/.java/deployment/deployment.properties
      Is it the case that it is not configured?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_deployment_config_mandatory_question:question:1">
          <ns9:question_text>To verify that deployment.config is configured properly,
run the following command:
$ grep 'deployment.system.config.mandatory' /etc/.java/deployment/deployment.config
If properly configured, the output should return:
deployment.system.config.mandatory=false
      Is it the case that it is not configured?
      </ns9:question_text>
        </ns9:boolean_question>
        <ns9:boolean_question id="ocil:ssg-java_jre_deployment_config_exists_question:question:1">
          <ns9:question_text>To verify that the deployment.config file exists,
run the following command:
$ ls /etc/.java/deployment
The output should contain:
deployment.config
      Is it the case that it does not exist?
      </ns9:question_text>
        </ns9:boolean_question>
      </ns9:questions>
    </ns9:ocil>
  </ns0:component>
  <ns0:component id="scap_org.open-scap_comp_ssg-jre-xccdf-1.2.xml" timestamp="2019-11-28T04:51:44">
    <ns10:Benchmark id="xccdf_org.ssgproject.content_benchmark_JRE" resolved="1" style="SCAP_1.2" xml:lang="en-US">
      <ns10:status date="2019-11-28">draft</ns10:status>
      <ns10:title xml:lang="en-US">Guide to the Secure Configuration of Java Runtime Environment</ns10:title>
      <ns10:description xml:lang="en-US">This guide presents a catalog of security-relevant
configuration settings for Java Runtime Environment. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <html:code>scap-security-guide</html:code> package which is developed at

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<html:br/><html:br/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <html:em>catalog, not a
checklist</html:em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <html:em>Profiles</html:em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The DISA STIG for Java Runtime Environment,
which provides required settings for US Department of Defense systems, is
one example of a baseline created from this guidance.
</ns10:description>
      <ns10:notice id="terms_of_use" xml:lang="en-US">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</ns10:notice>
      <ns10:front-matter xml:lang="en-US">The SCAP Security Guide Project<html:br/>

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</ns10:front-matter>
      <ns10:rear-matter xml:lang="en-US">Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</ns10:rear-matter>
      <ns10:platform idref="cpe:/a:oracle:jre:"/>
      <ns10:platform idref="cpe:/a:sun:jre:"/>
      <ns10:platform idref="cpe:/a:redhat:openjdk:"/>
      <ns10:platform idref="cpe:/a:ibm:jre:"/>
      <ns10:version update="https://github.com/OpenSCAP/scap-security-guide/releases/latest">0.1.47</ns10:version>
      <ns10:metadata>
        <dc:publisher>SCAP Security Guide Project</dc:publisher>
        <dc:creator>SCAP Security Guide Project</dc:creator>
        <dc:contributor>Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>
        <dc:contributor>0x66656c6978 &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Gabe Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>
        <dc:contributor>Firas AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>
        <dc:contributor>Christopher Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>
        <dc:contributor>angystardust &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Chuck Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>
        <dc:contributor>Ryan Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>
        <dc:contributor>Alex Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>
        <dc:contributor>Molly Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>
        <dc:contributor>Gabriel Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>
        <dc:contributor>Alexander Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>
        <dc:contributor>Jose Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>
        <dc:contributor>Joseph Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jeffrey Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Olivier Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>
        <dc:contributor>Ted Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>
        <dc:contributor>Blake Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>
        <dc:contributor>Patrick Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>
        <dc:contributor>Nick Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>
        <dc:contributor>James Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>
        <dc:contributor>Frank Caviggia &lt;fcaviggi@ra.iad.redhat.com&gt;</dc:contributor>
        <dc:contributor>Eric Christensen &lt;echriste@redhat.com&gt;</dc:contributor>
        <dc:contributor>Caleb Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>
        <dc:contributor>Deric Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>
        <dc:contributor>Maura Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Klaas Demter &lt;demter@atix.de&gt;</dc:contributor>
        <dc:contributor>dhanushkar-wso2 &lt;dhanushkar@wso2.com&gt;</dc:contributor>
        <dc:contributor>Andrew DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>
        <dc:contributor>Jean-Baptiste Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>
        <dc:contributor>drax &lt;applezip@gmail.com&gt;</dc:contributor>
        <dc:contributor>Greg Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>
        <dc:contributor>Leah Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alijohn Ghassemlouei &lt;alijohn.ghassemlouei@sapns2.com&gt;</dc:contributor>
        <dc:contributor>Andrew Gilmore &lt;agilmore2@gmail.com&gt;</dc:contributor>
        <dc:contributor>Joshua Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>
        <dc:contributor>Loren Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Patrik Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>
        <dc:contributor>Steve Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>
        <dc:contributor>Marek Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Rebekah Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Trey Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>
        <dc:contributor>Henning Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>
        <dc:contributor>hex2a &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>John Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>
        <dc:contributor>De Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>
        <dc:contributor>Robin Price II &lt;robin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jiri Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Keith Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jeremiah Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>
        <dc:contributor>Stephan Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>
        <dc:contributor>Jono &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>
        <dc:contributor>Kai Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>
        <dc:contributor>Charles Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>
        <dc:contributor>Yuli Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>
        <dc:contributor>Lee Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>
        <dc:contributor>Peter 'Pessoft' Kol&#xED;nek &lt;github@pessoft.com&gt;</dc:contributor>
        <dc:contributor>Luke Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>
        <dc:contributor>Malte Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>
        <dc:contributor>kspargur &lt;kspargur@kspargur.csb&gt;</dc:contributor>
        <dc:contributor>Amit Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fen Labalme &lt;fen@civicactions.com&gt;</dc:contributor>
        <dc:contributor>Ian Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>
        <dc:contributor>Jarrett Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>
        <dc:contributor>Jan Lieskovsky &lt;jlieskov@redhat.com&gt;</dc:contributor>
        <dc:contributor>&#x160;imon Luka&#x161;&#xED;k &lt;slukasik@redhat.com&gt;</dc:contributor>
        <dc:contributor>Milan Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fredrik Lys&#xE9;n &lt;fredrik@pipemore.se&gt;</dc:contributor>
        <dc:contributor>Matus Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jamie Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michael McConachie &lt;michael@redhat.com&gt;</dc:contributor>
        <dc:contributor>Khary Mendez &lt;kharyam@gmail.com&gt;</dc:contributor>
        <dc:contributor>Rodney Mercer &lt;rmercer@harris.com&gt;</dc:contributor>
        <dc:contributor>Matt Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>
        <dc:contributor>Brian Millett &lt;bmillett@gmail.com&gt;</dc:contributor>
        <dc:contributor>Mixer9 &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>mmosel &lt;mmosel@kde.example.com&gt;</dc:contributor>
        <dc:contributor>Zbynek Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kazuo Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Michael Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Joe Nall &lt;joe@nall.com&gt;</dc:contributor>
        <dc:contributor>Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>
        <dc:contributor>Axel Nennker &lt;axel@nennker.de&gt;</dc:contributor>
        <dc:contributor>Michele Newman &lt;mnewman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Sean O'Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ilya Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>
        <dc:contributor>Kaustubh Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>
        <dc:contributor>Michael Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>
        <dc:contributor>Max R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>
        <dc:contributor>Jan Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>
        <dc:contributor>pcactr &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Kenneth Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>
        <dc:contributor>Nathan Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>
        <dc:contributor>Frank Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>
        <dc:contributor>Stefan Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>
        <dc:contributor>Vojtech Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Martin Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>
        <dc:contributor>Wesley Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>
        <dc:contributor>Raphael Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>
        <dc:contributor>T.O. Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>
        <dc:contributor>Kenyon Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>
        <dc:contributor>Rick Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>
        <dc:contributor>Chris Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>
        <dc:contributor>rhayes &lt;rhayes@rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Pat Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>
        <dc:contributor>rlucente-se-jboss &lt;rlucente@redhat.com&gt;</dc:contributor>
        <dc:contributor>Joshua Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>
        <dc:contributor>rrenshaw &lt;bofh69@yahoo.com&gt;</dc:contributor>
        <dc:contributor>Chris Ruffalo &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ray Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>
        <dc:contributor>Willy Santos &lt;wsantos@redhat.com&gt;</dc:contributor>
        <dc:contributor>Gautam Satish &lt;gautams@hpe.com&gt;</dc:contributor>
        <dc:contributor>Watson Sato &lt;wsato@redhat.com&gt;</dc:contributor>
        <dc:contributor>Satoru SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alexander Scheel &lt;ascheel@redhat.com&gt;</dc:contributor>
        <dc:contributor>Spencer Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>
        <dc:contributor>Thomas Sj&#xF6;gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Francisco Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>
        <dc:contributor>David Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Kevin Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kenneth Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>
        <dc:contributor>Leland Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Justin Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Brian Stinson &lt;brian@bstinson.com&gt;</dc:contributor>
        <dc:contributor>Philippe Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>
        <dc:contributor>Paul Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>
        <dc:contributor>tomas.hudik &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>
        <dc:contributor>Jeb Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>
        <dc:contributor>Mat&#x11B;j T&#xFD;&#x10D; &lt;matyc@redhat.com&gt;</dc:contributor>
        <dc:contributor>VadimDor &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Shawn Wells &lt;shawn@redhat.com&gt;</dc:contributor>
        <dc:contributor>Daniel E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Roy Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>
        <dc:contributor>Rob Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>
        <dc:contributor>Lucas Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>Xirui Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>
        <dc:contributor>Kevin Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>
        <dc:contributor>Jan &#x10C;ern&#xFD; &lt;jcerny@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michal &#x160;ruba&#x159; &lt;msrubar@redhat.com&gt;</dc:contributor>
        <dc:source>https://github.com/OpenSCAP/scap-security-guide/releases/latest</dc:source>
      </ns10:metadata>
      <ns10:model system="urn:xccdf:scoring:default"/>
      <ns10:Profile id="xccdf_org.ssgproject.content_profile_stig">
        <ns10:title override="true" xml:lang="en-US">Java Runtime Environment (JRE) STIG</ns10:title>
        <ns10:description override="true" xml:lang="en-US">The Java Runtime Environment (JRE) is a bundle developed
and offered by Oracle Corporation which includes the Java Virtual Machine
(JVM), class libraries, and other components necessary to run Java
applications and applets. Certain default settings within the JRE pose
a security risk so it is necessary to deploy system wide properties to
ensure a higher degree of security when utilizing the JRE.

The IBM Corporation also develops and bundles the Java Runtime Environment
(JRE) as well as Red Hat with OpenJDK.</ns10:description>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_exists" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_properties" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_mandatory" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_deployment_properties_exists" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_untrusted_sources" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_untrusted_sources_locked" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_validation_crl" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_validation_crl_locked" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_validation_ocsp" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_validation_ocsp_locked" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_rule_java_jre_updated" selected="true"/>
        <ns10:select idref="xccdf_org.ssgproject.content_group_remediation_functions" selected="false"/>
      </ns10:Profile>
      <ns10:Group id="xccdf_org.ssgproject.content_group_remediation_functions">
        <ns10:title xml:lang="en-US">Remediation functions used by the SCAP Security Guide Project</ns10:title>
        <ns10:description xml:lang="en-US">XCCDF form of the various remediation functions as used by remediation scripts from the SCAP Security Guide Project.</ns10:description>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_create_audit_remediation_unsuccessful_file_modification_detailed" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function create_audit_remediation_unsuccessful_file_modification_detailed</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value>function create_audit_remediation_unsuccessful_file_modification_detailed {
	mkdir -p "$(dirname "$1")"
	# The - option to mark a here document limit string (&lt;&lt;-EOF) suppresses leading tabs (but not spaces) in the output.
	cat &lt;&lt;-EOF &gt; "$1"
		## This content is a section of an Audit config snapshot recommended for RHEL8 sytems that target OSPP compliance.
		## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

		## The purpose of these rules is to meet the requirements for Operating
		## System Protection Profile (OSPP)v4.2. These rules depends on having
		## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

		## Unsuccessful file creation (open with O_CREAT)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create

		## Unsuccessful file modifications (open for write or truncate)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification

		## Unsuccessful file access (any other opens) This has to go last.
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
	EOF
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_die" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function die</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Print a message to stderr and exit the shell
# $1: The message to print.
# $2: The error code (optional, default is 1)
function die {
	local _message="$1" _rc="${2:-1}"
	printf '%s\n' "$_message" &gt;&amp;2
	exit "$_rc"
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_ensure_there_are_servers_in_ntp_compatible_config_file" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function ensure_there_are_servers_in_ntp_compatible_config_file</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function ensures that the ntp/chrony config file contains valid server entries
# $1: Path to the config file
# $2: Comma-separated list of servers
function ensure_there_are_servers_in_ntp_compatible_config_file {
	# If invoked with no arguments, exit. This is an intentional behavior.
	[ $# -gt 1 ] || return 0
	[ $# = 2 ] || die "$0 requires zero or exactly two arguments"
	local _config_file="$1" _servers_list="$2"
	if ! grep -q '#[[:space:]]*server' "$_config_file"; then
		for server in $(echo "$_servers_list" | tr ',' '\n') ; do
			printf '\nserver %s iburst' "$server" &gt;&gt; "$_config_file"
		done
	else
		sed -i 's/#[ \t]*server/server/g' "$_config_file"
	fi
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_fix_audit_syscall_rule" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function fix_audit_syscall_rule</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo $rule | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_fix_audit_watch_rule" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function fix_audit_watch_rule</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function to fix audit file system object watch rule for given path:
# * if rule exists, also verifies the -w bits match the requirements
# * if rule doesn't exist yet, appends expected rule form to $files_to_inspect
#   audit rules file, depending on the tool which was used to load audit rules
#
# Expects four arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules'
# * path                        	value of -w audit rule's argument
# * required access bits        	value of -p audit rule's argument
# * key                         	value of -k audit rule's argument
#
# Example call:
#
#       fix_audit_watch_rule "auditctl" "/etc/localtime" "wa" "audit_time_rules"
#
function fix_audit_watch_rule {

# Load function arguments into local variables
local tool="$1"
local path="$2"
local required_access_bits="$3"
local key="$4"

# Check sanity of the input
if [ $# -ne "4" ]
then
	echo "Usage: fix_audit_watch_rule 'tool' 'path' 'bits' 'key'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
#
# -----------------------------------------------------------------------------------------
# Tool used to load audit rules	| Rule already defined	|  Audit rules file to inspect	  |
# -----------------------------------------------------------------------------------------
#	auditctl		|     Doesn't matter	|  /etc/audit/audit.rules	  |
# -----------------------------------------------------------------------------------------
# 	augenrules		|          Yes		|  /etc/audit/rules.d/*.rules	  |
# 	augenrules		|          No		|  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
declare -a files_to_inspect
files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# into the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules')
# If the audit is 'augenrules', then check if rule is already defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to list of files for inspection.
# If rule isn't defined, add '/etc/audit/rules.d/$key.rules' to list of files for inspection.
elif [ "$tool" == 'augenrules' ]
then
	readarray -t matches &lt; &lt;(grep -P "[\s]*-w[\s]+$path" /etc/audit/rules.d/*.rules)

	# For each of the matched entries
	for match in "${matches[@]}"
	do
		# Extract filepath from the match
		rulesd_audit_file=$(echo $match | cut -f1 -d ':')
		# Append that path into list of files for inspection
		files_to_inspect+=("$rulesd_audit_file")
	done
	# Case when particular audit rule isn't defined yet
	if [ "${#files_to_inspect[@]}" -eq "0" ]
	then
		# Append '/etc/audit/rules.d/$key.rules' into list of files for inspection
		local key_rule_file="/etc/audit/rules.d/$key.rules"
		# If the $key.rules file doesn't exist yet, create it with correct permissions
		if [ ! -e "$key_rule_file" ]
		then
			touch "$key_rule_file"
			chmod 0640 "$key_rule_file"
		fi

		files_to_inspect+=("$key_rule_file")
	fi
fi

# Finally perform the inspection and possible subsequent audit rule
# correction for each of the files previously identified for inspection
for audit_rules_file in "${files_to_inspect[@]}"
do

	# Check if audit watch file system object rule for given path already present
	if grep -q -P -- "[\s]*-w[\s]+$path" "$audit_rules_file"
	then
		# Rule is found =&gt; verify yet if existing rule definition contains
		# all of the required access type bits

		# Escape slashes in path for use in sed pattern below
		local esc_path=${path//$'/'/$'\/'}
		# Define BRE whitespace class shortcut
		local sp="[[:space:]]"
		# Extract current permission access types (e.g. -p [r|w|x|a] values) from audit rule
		current_access_bits=$(sed -ne "s/$sp*-w$sp\+$esc_path$sp\+-p$sp\+\([rxwa]\{1,4\}\).*/\1/p" "$audit_rules_file")
		# Split required access bits string into characters array
		# (to check bit's presence for one bit at a time)
		for access_bit in $(echo "$required_access_bits" | grep -o .)
		do
			# For each from the required access bits (e.g. 'w', 'a') check
			# if they are already present in current access bits for rule.
			# If not, append that bit at the end
			if ! grep -q "$access_bit" &lt;&lt;&lt; "$current_access_bits"
			then
				# Concatenate the existing mask with the missing bit
				current_access_bits="$current_access_bits$access_bit"
			fi
		done
		# Propagate the updated rule's access bits (original + the required
		# ones) back into the /etc/audit/audit.rules file for that rule
		sed -i "s/\($sp*-w$sp\+$esc_path$sp\+-p$sp\+\)\([rxwa]\{1,4\}\)\(.*\)/\1$current_access_bits\3/" "$audit_rules_file"
	else
		# Rule isn't present yet. Append it at the end of $audit_rules_file file
		# with proper key

		echo "-w $path -p $required_access_bits -k $key" &gt;&gt; "$audit_rules_file"
	fi
done
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_include_merge_files_by_lines" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function include_merge_files_by_lines</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value>function include_merge_files_by_lines {
	:
}

# 1: Filename of the "master" file
# 2: Filename of the newly created file
function create_empty_file_like {
	local lines_count
	lines_count=$(cat "$1" | wc -l)
	for _ in $(seq 1 "$lines_count"); do
		printf '\n' &gt;&gt; "$2"
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
function second_file_is_same_except_newlines {
	local lines_of_master lines_of_sample len_of_master line_number i
	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	len_of_master="${#lines_of_master[@]}"
	if test "$len_of_master" != "${#lines_of_sample[@]}"; then
		echo "Files '$1' and '$2' have different number of lines, $len_of_master and ${#lines_of_sample[@]} respectively."
		return 1
	fi

	for line_number in $(seq 1 "$len_of_master"); do
		i=$((line_number - 1))
		test -n "${lines_of_sample[$i]}" || continue
		if test "${lines_of_master[$i]}" != "${lines_of_sample[$i]}"; then
			echo "Line $line_number is different in files '$1' and '$2'."
			return 1
		fi
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
# 3: List of indices (1-based, space-separated string)
function merge_first_lines_to_second_on_indices {
	local lines_of_master lines_of_sample line_number i
	test -f "$2" || create_empty_file_like "$1" "$2"

	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	error_msg="$(second_file_is_same_except_newlines "$1" "$2")"
	if test $? != 0; then
		echo "Error merging lines into '$2': $error_msg" &gt;&amp;2
		return 1
	fi

	for line_number in $3; do
		i=$((line_number - 1))
		lines_of_sample[$i]="${lines_of_master[$i]}"
	done

	printf "%s\n" "${lines_of_sample[@]}" &gt; "$2"
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_include_mount_options_functions" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function include_mount_options_functions</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value>function include_mount_options_functions {
	:
}

# $1: type of filesystem
# $2: new mount point option
# $3: filesystem of new mount point (used when adding new entry in fstab)
# $4: mount type of new mount point (used when adding new entry in fstab)
function ensure_mount_option_for_vfstype {
        local _vfstype="$1" _new_opt="$2" _filesystem=$3 _type=$4 _vfstype_points=()
        readarray -t _vfstype_points &lt; &lt;(grep -E "[[:space:]]${_vfstype}[[:space:]]" /etc/fstab | awk '{print $2}')

        for _vfstype_point in "${_vfstype_points[@]}"
        do
                ensure_mount_option_in_fstab "$_vfstype_point" "$_new_opt" "$_filesystem" "$_type"
        done
}

# $1: mount point
# $2: new mount point option
# $3: device or virtual string (used when adding new entry in fstab)
# $4: mount type of mount point (used when adding new entry in fstab)
function ensure_mount_option_in_fstab {
	local _mount_point="$1" _new_opt="$2" _device=$3 _type=$4
	local _mount_point_match_regexp="" _previous_mount_opts=""
	_mount_point_match_regexp="$(get_mount_point_regexp "$_mount_point")"

	if [ "$(grep -c "$_mount_point_match_regexp" /etc/fstab)" -eq 0 ]; then
		# runtime opts without some automatic kernel/userspace-added defaults
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/mtab | head -1 |  awk '{print $4}' \
					| sed -E "s/(rw|defaults|seclabel|${_new_opt})(,|$)//g;s/,$//")
		[ "$_previous_mount_opts" ] &amp;&amp; _previous_mount_opts+=","
		echo "${_device} ${_mount_point} ${_type} defaults,${_previous_mount_opts}${_new_opt} 0 0" &gt;&gt; /etc/fstab
	elif [ "$(grep "$_mount_point_match_regexp" /etc/fstab | grep -c "$_new_opt")" -eq 0 ]; then
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/fstab | awk '{print $4}')
		sed -i "s|\(${_mount_point_match_regexp}.*${_previous_mount_opts}\)|\1,${_new_opt}|" /etc/fstab
	fi
}

# $1: mount point
function get_mount_point_regexp {
		printf "[[:space:]]%s[[:space:]]" "$1"
}

# $1: mount point
function assert_mount_point_in_fstab {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	grep "$_mount_point_match_regexp" -q /etc/fstab \
		|| { echo "The mount point '$1' is not even in /etc/fstab, so we can't set up mount options" &gt;&amp;2; return 1; }
}

# $1: mount point
function remove_defaults_from_fstab_if_overriden {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	if grep "$_mount_point_match_regexp" /etc/fstab | grep -q "defaults,"
	then
		sed -i "s|\(${_mount_point_match_regexp}.*\)defaults,|\1|" /etc/fstab
	fi
}

# $1: mount point
function ensure_partition_is_mounted {
	local _mount_point="$1"
	mkdir -p "$_mount_point" || return 1
	if mountpoint -q "$_mount_point"; then
		mount -o remount --target "$_mount_point"
	else
		mount --target "$_mount_point"
	fi
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_include_set_faillock_option" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function include_set_faillock_option</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value>function include_set_faillock_option {
	:
}

function insert_preauth {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	# is auth required pam_faillock.so preauth present?
	if grep -qE "^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$" "$pam_file" ; then
		# is the option set?
		if grep -qE "^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$option=([0-9]*).*$" "$pam_file" ; then
			# just change the value of option to a correct value
			sed -i --follow-symlinks "s/\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\)\($option *= *\).*/\1\2$value/" "$pam_file"
		# the option is not set.
		else
			# append the option
			sed -i --follow-symlinks "/^auth.*required.*pam_faillock.so.*preauth.*silent.*/ s/$/ $option=$value/" "$pam_file"
		fi
	# auth required pam_faillock.so preauth is not present, insert the whole line
	else
		sed -i --follow-symlinks "/^auth.*sufficient.*pam_unix.so.*/i auth        required      pam_faillock.so preauth silent $option=$value" "$pam_file"
	fi
}

function insert_authfail {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	# is auth default pam_faillock.so authfail present?
	if grep -qE "^\s*auth\s+(\[default=die\])\s+pam_faillock\.so\s+authfail.*$" "$pam_file" ; then
		# is the option set?
		if grep -qE "^\s*auth\s+(\[default=die\])\s+pam_faillock\.so\s+authfail.*$option=([0-9]*).*$" "$pam_file" ; then
			# just change the value of option to a correct value
			sed -i --follow-symlinks "s/\(^auth.*[default=die].*pam_faillock.so.*authfail.*\)\($option *= *\).*/\1\2$value/" "$pam_file"
		# the option is not set.
		else
			# append the option
			sed -i --follow-symlinks "/^auth.*[default=die].*pam_faillock.so.*authfail.*/ s/$/ $option=$value/" "$pam_file"
		fi
	# auth default pam_faillock.so authfail is not present, insert the whole line
	else
		sed -i --follow-symlinks "/^auth.*sufficient.*pam_unix.so.*/a auth        [default=die] pam_faillock.so authfail $option=$value" "$pam_file"
	fi
}

function insert_account {
	local pam_file="$1"
	if ! grep -qE "^\s*account\s+required\s+pam_faillock\.so.*$" "$pam_file" ; then
		sed -E -i --follow-symlinks "/^\s*account\s*required\s*pam_unix.so/i account     required      pam_faillock.so" "$pam_file"
	fi
}

function set_faillock_option {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	insert_preauth "$pam_file" "$option" "$value"
	insert_authfail "$pam_file" "$option" "$value"
	insert_account "$pam_file"
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_perform_audit_adjtimex_settimeofday_stime_remediation" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function perform_audit_adjtimex_settimeofday_stime_remediation</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo $rule | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}


# Function to perform remediation for the 'adjtimex', 'settimeofday', and 'stime' audit
# system calls on RHEL, Fedora or OL systems.
# Remediation performed for both possible tools: 'auditctl' and 'augenrules'.
#
# Note: 'stime' system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
# therefore excluded from the list of time group system calls to be audited on this arch
#
# Example Call:
#
#      perform_audit_adjtimex_settimeofday_stime_remediation
#
function perform_audit_adjtimex_settimeofday_stime_remediation {

# Retrieve hardware architecture of the underlying system
[ "$(getconf LONG_BIT)" = "32" ] &amp;&amp; RULE_ARCHS=("b32") || RULE_ARCHS=("b32" "b64")

for ARCH in "${RULE_ARCHS[@]}"
do

	PATTERN="-a always,exit -F arch=${ARCH} -S .* -k *"
	# Create expected audit group and audit rule form for particular system call &amp; architecture
	if [ ${ARCH} = "b32" ]
	then
		# stime system call is known at 32-bit arch (see e.g "$ ausyscall i386 stime" 's output)
		# so append it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\|stime\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -S stime -k audit_time_rules"
	elif [ ${ARCH} = "b64" ]
	then
		# stime system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
		# therefore don't add it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -k audit_time_rules"
	fi
	# Perform the remediation for both possible tools: 'auditctl' and 'augenrules'
	fix_audit_syscall_rule "auditctl" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
	fix_audit_syscall_rule "augenrules" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
done

}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_perform_audit_rules_privileged_commands_remediation" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function perform_audit_rules_privileged_commands_remediation</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function to perform remediation for 'audit_rules_privileged_commands' rule
#
# Expects two arguments:
#
# audit_tool		tool used to load audit rules
# 			One of 'auditctl' or 'augenrules'
#
# min_auid		Minimum original ID the user logged in with
# 			'500' for RHEL-6 and before, '1000' for RHEL-7 and after.
#
# Example Call(s):
#
#      perform_audit_rules_privileged_commands_remediation "auditctl" "500"
#      perform_audit_rules_privileged_commands_remediation "augenrules"	"1000"
#
function perform_audit_rules_privileged_commands_remediation {
#
# Load function arguments into local variables
local tool="$1"
local min_auid="$2"

# Check sanity of the input
if [ $# -ne "2" ]
then
	echo "Usage: perform_audit_rules_privileged_commands_remediation 'auditctl | augenrules' '500 | 1000'"
	echo "Aborting."
	exit 1
fi

declare -a files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then:
# * add '/etc/audit/audit.rules'to the list of files to be inspected,
# * specify '/etc/audit/audit.rules' as the output audit file, where
#   missing rules should be inserted
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect=("/etc/audit/audit.rules")
	output_audit_file="/etc/audit/audit.rules"
#
# If the audit tool is 'augenrules', then:
# * add '/etc/audit/rules.d/*.rules' to the list of files to be inspected
#   (split by newline),
# * specify /etc/audit/rules.d/privileged.rules' as the output file, where
#   missing rules should be inserted
elif [ "$tool" == 'augenrules' ]
then
	readarray -t files_to_inspect &lt; &lt;(find /etc/audit/rules.d -maxdepth 1 -type f -name '*.rules' -print)
	output_audit_file="/etc/audit/rules.d/privileged.rules"
fi

# Obtain the list of SUID/SGID binaries on the particular system (split by newline)
# into privileged_binaries array
readarray -t privileged_binaries &lt; &lt;(find / -xdev -type f -perm -4000 -o -type f -perm -2000 2&gt;/dev/null)

# Keep list of SUID/SGID binaries that have been already handled within some previous iteration
declare -a sbinaries_to_skip=()

# For each found sbinary in privileged_binaries list
for sbinary in "${privileged_binaries[@]}"
do

	# Check if this sbinary wasn't already handled in some of the previous sbinary iterations
	# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
	if [[ $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
	then
		# If so, don't process it second time &amp; go to process next sbinary
		continue
	fi

	# Reset the counter of inspected files when starting to check
	# presence of existing audit rule for new sbinary
	local count_of_inspected_files=0

	# Define expected rule form for this binary
	expected_rule="-a always,exit -F path=${sbinary} -F perm=x -F auid&gt;=${min_auid} -F auid!=unset -k privileged"

	# If list of audit rules files to be inspected is empty, just add new rule and move on to next binary
	if [[ ${#files_to_inspect[@]} -eq 0 ]]; then
		echo "$expected_rule" &gt;&gt; "$output_audit_file"
		continue
	fi

	# Replace possible slash '/' character in sbinary definition so we could use it in sed expressions below
	sbinary_esc=${sbinary//$'/'/$'\/'}

	# For each audit rules file from the list of files to be inspected
	for afile in "${files_to_inspect[@]}"
	do

		# Search current audit rules file's content for match. Match criteria:
		# * existing rule is for the same SUID/SGID binary we are currently processing (but
		#   can contain multiple -F path= elements covering multiple SUID/SGID binaries)
		# * existing rule contains all arguments from expected rule form (though can contain
		#   them in arbitrary order)
	
		base_search=$(sed -e '/-a always,exit/!d' -e '/-F path='"${sbinary_esc}"'/!d'		\
				-e '/-F path=[^[:space:]]\+/!d'   -e '/-F perm=.*/!d'						\
				-e '/-F auid&gt;='"${min_auid}"'/!d' -e '/-F auid!=\(4294967295\|unset\)/!d'	\
				-e '/-k \|-F key=/!d' "$afile")

		# Increase the count of inspected files for this sbinary
		count_of_inspected_files=$((count_of_inspected_files + 1))

		# Require execute access type to be set for existing audit rule
		exec_access='x'

		# Search current audit rules file's content for presence of rule pattern for this sbinary
		if [[ $base_search ]]
		then

			# Current audit rules file already contains rule for this binary =&gt;
			# Store the exact form of found rule for this binary for further processing
			concrete_rule=$base_search

			# Select all other SUID/SGID binaries possibly also present in the found rule

			readarray -t handled_sbinaries &lt; &lt;(grep -o -e "-F path=[^[:space:]]\+" &lt;&lt;&lt; "$concrete_rule")
			handled_sbinaries=("${handled_sbinaries[@]//-F path=/}")

			# Merge the list of such SUID/SGID binaries found in this iteration with global list ignoring duplicates
			readarray -t sbinaries_to_skip &lt; &lt;(for i in "${sbinaries_to_skip[@]}" "${handled_sbinaries[@]}"; do echo "$i"; done | sort -du)

			# Separate concrete_rule into three sections using hash '#'
			# sign as a delimiter around rule's permission section borders
			concrete_rule="$(echo "$concrete_rule" | sed -n "s/\(.*\)\+\(-F perm=[rwax]\+\)\+/\1#\2#/p")"

			# Split concrete_rule into head, perm, and tail sections using hash '#' delimiter

			rule_head=$(cut -d '#' -f 1 &lt;&lt;&lt; "$concrete_rule")
			rule_perm=$(cut -d '#' -f 2 &lt;&lt;&lt; "$concrete_rule")
			rule_tail=$(cut -d '#' -f 3 &lt;&lt;&lt; "$concrete_rule")

			# Extract already present exact access type [r|w|x|a] from rule's permission section
			access_type=${rule_perm//-F perm=/}

			# Verify current permission access type(s) for rule contain 'x' (execute) permission
			if ! grep -q "$exec_access" &lt;&lt;&lt; "$access_type"
			then

				# If not, append the 'x' (execute) permission to the existing access type bits
				access_type="$access_type$exec_access"
				# Reconstruct the permissions section for the rule
				new_rule_perm="-F perm=$access_type"
				# Update existing rule in current audit rules file with the new permission section
				sed -i "s#${rule_head}\(.*\)${rule_tail}#${rule_head}${new_rule_perm}${rule_tail}#" "$afile"

			fi

		# If the required audit rule for particular sbinary wasn't found yet, insert it under following conditions:
		#
		# * in the "auditctl" mode of operation insert particular rule each time
		#   (because in this mode there's only one file -- /etc/audit/audit.rules to be inspected for presence of this rule),
		#
		# * in the "augenrules" mode of operation insert particular rule only once and only in case we have already
		#   searched all of the files from /etc/audit/rules.d/*.rules location (since that audit rule can be defined
		#   in any of those files and if not, we want it to be inserted only once into /etc/audit/rules.d/privileged.rules file)
		#
		elif [ "$tool" == "auditctl" ] || [[ "$tool" == "augenrules" &amp;&amp; $count_of_inspected_files -eq "${#files_to_inspect[@]}" ]]
		then

			# Check if this sbinary wasn't already handled in some of the previous afile iterations
			# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
			if [[ ! $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
			then
				# Current audit rules file's content doesn't contain expected rule for this
				# SUID/SGID binary yet =&gt; append it
				echo "$expected_rule" &gt;&gt; "$output_audit_file"
			fi

			continue
		fi

	done

done
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_populate" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function populate</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># The populate function isn't directly used by SSG at the moment but it can be 
# used for testing purposes and will be used in SSG Testsuite in the future.

function populate {
# code to populate environment variables needed (for unit testing)
if [ -z "${!1}" ]; then
	echo "$1 is not defined. Exiting."
	exit
fi
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_replace_or_append" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function replace_or_append</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value># Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append &lt;config_file_location&gt; &lt;key_to_search&gt; &lt;new_value&gt; [&lt;CCE number or literal '@CCENUM@' if unknown&gt;] [printf-like format, default is '$default_format']" &gt;&amp;2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] &amp;&amp; [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' &lt;&lt;&lt; "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \&gt;),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\&gt;" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\&gt;.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" &gt;&gt; "$config_file"
    printf '%s\n' "$formatted_output" &gt;&gt; "$config_file"
  fi
}</ns10:value>
        </ns10:Value>
        <ns10:Value hidden="true" id="xccdf_org.ssgproject.content_value_function_set_faillock_option_to_value_in_pam_file" operator="equals" prohibitChanges="true" type="string">
          <ns10:title xml:lang="en-US">Remediation function set_faillock_option_to_value_in_pam_file</ns10:title>
          <ns10:description xml:lang="en-US">Shared bash remediation function. Not intended to be changed by tailoring.</ns10:description>
          <ns10:value>function set_faillock_option_to_value_in_pam_file {
	# If invoked with no arguments, exit. This is an intentional behavior.
	[ $# -gt 1 ] || return 0
	[ $# -ge 3 ] || die "$0 requires exactly zero, three, or four arguments"
	[ $# -le 4 ] || die "$0 requires exactly zero, three, or four arguments"
	local _pamFile="$1" _option="$2" _value="$3" _insert_lines_callback="$4"
	# pam_faillock.so already present?
	if grep -q "^auth.*pam_faillock.so.*" "$_pamFile"; then

		# pam_faillock.so present, is the option present?
		if grep -q "^auth.*[default=die].*pam_faillock.so.*authfail.*$_option=" "$_pamFile"; then

			# both pam_faillock.so &amp; option present, just correct option to the right value
			sed -i --follow-symlinks "s/\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"
			sed -i --follow-symlinks "s/\(^auth.*[default=die].*pam_faillock.so.*authfail.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"

		# pam_faillock.so present, but the option not yet
		else

			# append correct option value to appropriate places
			sed -i --follow-symlinks "/^auth.*required.*pam_faillock.so.*preauth.*silent.*/ s/$/ $_option=$_value/" "$_pamFile"
			sed -i --follow-symlinks "/^auth.*[default=die].*pam_faillock.so.*authfail.*/ s/$/ $_option=$_value/" "$_pamFile"
		fi

	# pam_faillock.so not present yet
	else
		test -z "$_insert_lines_callback" || "$_insert_lines_callback" "$_option" "$_value" "$_pamFile"
		# insert pam_faillock.so preauth &amp; authfail rows with proper value of the option in question
	fi
}</ns10:value>
        </ns10:Value>
      </ns10:Group>
      <ns10:Group id="xccdf_org.ssgproject.content_group_java">
        <ns10:title xml:lang="en-US">Java</ns10:title>
        <ns10:description xml:lang="en-US">Java is a general-purpose computer programming language. It is intended to
let application developers "write once, run anywhere." Java applications are
typically compiled to bytecode that can run on any Java virtual machine (JVM)
regardless of computer architecture. As such, the Java runtime environment (JRE)
is required to be installed so that Java applications can run. This section
provides settings for configuring Java policies to meet compliance
settings for Java running on Red Hat Enterprise Linux systems.
<html:br/><html:br/>
<html:ul>Refer to <html:li><html:a href="https://docs.oracle.com/javase/6/docs/technotes/guides/deployment/deployment-guide/properties.html">https://docs.oracle.com/javase/6/docs/technotes/guides/deployment/deployment-guide/properties.html</html:a></html:li>
for a list of currently supported Java version 6 settings.</html:ul>
<html:ul>Refer to <html:li><html:a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp/properties.html">https://docs.oracle.com/javase/7/docs/technotes/guides/jweb/jcp/properties.html</html:a></html:li>
for a list of currently supported Java version 7 settings.</html:ul>
<html:ul>Refer to <html:li><html:a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jweb/jcp/properties.html">https://docs.oracle.com/javase/8/docs/technotes/guides/jweb/jcp/properties.html</html:a></html:li>
for a list of currently supported Java version 8 settings.</html:ul></ns10:description>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_configure_crypto_policy" selected="false" severity="unknown">
          <ns10:title xml:lang="en-US">Configure Java Runtime to use System Crypto Policy</ns10:title>
          <ns10:description xml:lang="en-US">Crypto Policies provide a centralized control over crypto algorithms usage of many packages.
Java is supported by crypto policy, but the Java configuration may be
set up to ignore it.

To check that Crypto Policies settings are configured correctly, you have to examine the JRE config file
available under <html:code>/usr/lib/jvm/jre/lib/security/java.security</html:code>.
If this config file contains the line <html:code>security.useSystemPropertiesFile=true</html:code>,
settings that are part of the system-wide crypto policy take precedence.</ns10:description>
          <ns10:rationale xml:lang="en-US">Overriding the system crypto policy makes the behavior of the Java runtime violates expectations,
and makes system configuration more fragmented.</ns10:rationale>
          <ns10:fix id="java_jre_configure_crypto_policy" system="urn:xccdf:fix:script:sh">

JRE_CONFIG_FILE="/usr/lib/jvm/jre/lib/security/java.security"
<ns10:sub idref="xccdf_org.ssgproject.content_value_function_replace_or_append" use="legacy"/>
replace_or_append "$JRE_CONFIG_FILE" '^security.useSystemPropertiesFile' 'true' '' '%s=%s'
</ns10:fix>
          <ns10:fix complexity="low" disruption="medium" id="java_jre_configure_crypto_policy" reboot="true" strategy="disable" system="urn:xccdf:fix:script:ansible">- name: Configure Java Runtime to use System Crypto Policy
  lineinfile:
    create: true
    dest: /usr/lib/jvm/jre/lib/security/java.security
    regexp: ^\s*#?\s*security.useSystemPropertiesFile=true
    line: security.useSystemPropertiesFile=true
  tags:
    - java_jre_configure_crypto_policy
    - unknown_severity
    - disable_strategy
    - low_complexity
    - medium_disruption
    - reboot_required
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_configure_crypto_policy:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_configure_crypto_policy_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_validation_ocsp_locked" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Disable User Access to Online Certificate Validation Settings</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that users cannot change the online certificate verification settings,
add <html:code>deployment.security.validation.ocsp.locked</html:code> to
<html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0050-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Online certificate validation provides a greater degree of validation of certificates
when running a signed Java applet. Permitting execution of an applet with an invalid
certificate may result in malware execution , system modification, invasion of privacy,
and denial of service. As such, ensuring users cannot change settings contributes to
a more consistent security profile.</ns10:rationale>
          <ns10:fix id="java_jre_validation_ocsp_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.validation.ocsp.locked$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.ocsp\..*/deployment.security.validation.ocsp.locked/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.ocsp.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_validation_ocsp_locked:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_validation_ocsp_locked_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_validation_crl_locked" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Disable User Access to Revocation Check Settings</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that users cannot change certificate revocation check settings,
add <html:code>deployment.security.validation.crl.locked</html:code> to
<html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0030-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Permitting execution of an applet published with a revoked certificate may
result in spoofing, malware, system modification, invasion of privacy,
and denial of service. As such, ensuring users cannot change settings
contributes to a more consistent security profile.</ns10:rationale>
          <ns10:fix id="java_jre_validation_crl_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.validation.crl.locked$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.crl\..*/deployment.security.validation.crl.locked/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.crl.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_validation_crl_locked:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_validation_crl_locked_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_deployment_properties_exists" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">The Java Properties File Exists</ns10:title>
          <ns10:description xml:lang="en-US">If the Java properties file does not exist, it can be added by running:
<html:pre>$ sudo mkdir -p -m 755 /etc/.java/deployment
$ sudo touch /etc/.java/deployment/deployment.properties
$ sudo chmod 644 /etc/.java/deployment/deployment.properties</html:pre></ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0080-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Each option in the Java control panel is represented by property keys.
These keys adjust the options in the Java control panel based on the value
assigned to that key. By default no deployment.properties file exists; thus,
no system-wide exists. Without the deployment.properties file, setting particular
options for the Java control panel is impossible.</ns10:rationale>
          <ns10:fix id="java_jre_deployment_properties_exists" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_PROPERTIES} ]; then
  touch ${JAVA_PROPERTIES} &amp;&amp; chmod 644 ${JAVA_PROPERTIES}
fi

chmod 644 ${JAVA_PROPERTIES}
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_deployment_properties_exists:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_deployment_properties_exists_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_untrusted_sources_locked" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Disable User Access to Untrusted Sources Settings</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that users cannot change the untrusted sources settings,
add <html:code>deployment.security.askgrantdialog.notinca.locked</html:code> to
<html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0010-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources may
result in malware running on the system, and risks system modification,
invasion of privacy, or denial of service. As such, ensuring users cannot
change the permission settings which control the execution of signed Java
applets contributes to a more consistent security profile.</ns10:rationale>
          <ns10:fix id="java_jre_untrusted_sources_locked" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.askgrantdialog.notinca.locked$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.askgrantdialog.notinca\..*/deployment.security.askgrantdialog.notinca.locked/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.notinca.locked" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_untrusted_sources_locked:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_untrusted_sources_locked_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_untrusted_sources" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Disable Java Execution From Untrusted Sources</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that Java cannot execute from untrusted sources, set
<html:code>deployment.security.askgrantdialog.notinca</html:code> to equal <html:code>false</html:code>
in <html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0001-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Permitting execution of signed Java applets from un-trusted sources
may result in acquiring malware, and risks system modification, invasion of
privacy, or denial of service.</ns10:rationale>
          <ns10:fix id="java_jre_untrusted_sources" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.askgrantdialog.notinca=false$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.askgrantdialog.notinca=.*/deployment.security.askgrantdialog.notinca=false/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.askgrantdialog.notinca=false" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_untrusted_sources:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_untrusted_sources_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_validation_crl" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Enable Revocation Checks for Publisher Certificates</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that certificate revocation checks are enabled, set
<html:code>deployment.security.validation.crl</html:code> to equal <html:code>true</html:code>
in <html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0020-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Certificates may be revoked due to improper issuance, compromise of the certificate,
and failure to adhere to policy. Therefore, any certificate found on a CRL
should not be trusted. Permitting execution of an applet published with a
revoked certificate may result in spoofing, malware, system modification,
invasion of privacy, and denial of service.</ns10:rationale>
          <ns10:fix id="java_jre_validation_crl" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.validation.crl=true$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.crl=.*/deployment.security.validation.crl=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.crl=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_validation_crl:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_validation_crl_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_updated" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Ensure Java Patches Installed</ns10:title>
          <ns10:description xml:lang="en-US">If the system is joined to the Red Hat Network, a Red Hat Satellite Server,
or a yum server, run the following command to install updates:
<html:pre>$ sudo yum update</html:pre>
If the system is not configured to use one of these sources, updates (in the form of RPM packages)
can be manually downloaded and installed using <html:code>rpm</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0090-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Running an older version of the JRE can introduce security
vulnerabilities to the system.</ns10:rationale>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_updated_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_validation_ocsp" selected="false" severity="medium">
          <ns10:title xml:lang="en-US">Enable Online Certificate Validation</ns10:title>
          <ns10:description xml:lang="en-US">To ensure that online certificate verification is enabled, set
<html:code>deployment.security.validation.ocsp</html:code> to equal <html:code>true</html:code>
in <html:code>/etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
          <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
          <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0040-UX</ns10:reference>
          <ns10:rationale xml:lang="en-US">Online certificate validation provides a greater degree of validation of certificates
when running a signed Java applet. Permitting execution of an applet with an invalid
certificate may result in malware execution , system modification, invasion of privacy,
and denial of service.</ns10:rationale>
          <ns10:fix id="java_jre_validation_ocsp" system="urn:xccdf:fix:script:sh">JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.security.validation.ocsp=true$" ${JAVA_PROPERTIES} &amp;&amp; \
sed -i "s/deployment.security.validation.ocsp=.*/deployment.security.validation.ocsp=true/g" ${JAVA_PROPERTIES}
if ! [ $? -eq 0 ] ; then
  echo "deployment.security.validation.ocsp=true" &gt;&gt; ${JAVA_PROPERTIES}
fi
</ns10:fix>
          <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_validation_ocsp:def:1"/>
          </ns10:check>
          <ns10:check system="http://scap.nist.gov/schema/ocil/2">
            <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_validation_ocsp_ocil:questionnaire:1"/>
          </ns10:check>
        </ns10:Rule>
        <ns10:Group id="xccdf_org.ssgproject.content_group_java_jre_deployment_config_configured">
          <ns10:title xml:lang="en-US">Configure the deployment.config File</ns10:title>
          <ns10:description xml:lang="en-US">The <html:code>deployment.config</html:code> file if used for specifying the System-level
<html:code>deployment.properties</html:code> file. The System-level configuration for Java is
configured in <html:code>/etc/.java/deployment</html:code>. By default, no <html:code>deployment.config</html:code>
file exists. To ensure that the Java <html:code>/etc/.java/deployment/deployment.config</html:code> file
is configured correctly, <html:code>deployment.system.config</html:code> and
<html:code>deployment.system.config.mandatory</html:code> need to be set correctly.</ns10:description>
          <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_properties" selected="false" severity="medium">
            <ns10:title xml:lang="en-US">Configure the deployment.properties File Path</ns10:title>
            <ns10:description xml:lang="en-US">To ensure that the Java properties file is set in
<html:code>/etc/.java/deployment/deployment.config</html:code>, add or modify
<html:code>deployment.system.config</html:code> to equal
<html:code>file:///etc/.java/deployment/deployment.properties</html:code>.</ns10:description>
            <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
            <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0060-UX</ns10:reference>
            <ns10:rationale xml:lang="en-US">Without a proper path for the properties file, deployment would not be possible.
If the path specified does not lead to a properties file, the value of the
'deployment.system.config.mandatory' key determines how to handle the situation.
If the value of this key is true, JRE will not run if the path to the properties
file is invalid.</ns10:rationale>
            <ns10:fix id="java_jre_deployment_config_properties" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"
JAVA_PROPERTIES="/etc/.java/deployment/deployment.properties"

grep -q "^deployment.system.config=file://${JAVA_CONFIG}$" ${JAVA_CONFIG} &amp;&amp; \
sed -i "s;deployment.system.config=.*;deployment.system.config=file:\/\/${JAVA_PROPERTIES};g" ${JAVA_CONFIG}
if ! [ $? -eq 0 ] ; then
  echo "deployment.system.config=file://${JAVA_PROPERTIES}" &gt;&gt; ${JAVA_CONFIG}
fi
</ns10:fix>
            <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_deployment_config_properties:def:1"/>
            </ns10:check>
            <ns10:check system="http://scap.nist.gov/schema/ocil/2">
              <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_deployment_config_properties_ocil:questionnaire:1"/>
            </ns10:check>
          </ns10:Rule>
          <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_mandatory" selected="false" severity="medium">
            <ns10:title xml:lang="en-US">Configure The Java Deployment Mandatory Setting</ns10:title>
            <ns10:description xml:lang="en-US">To configure the Java mandatory deployment setting, add or modify
<html:code>deployment.system.config.mandatory</html:code> to equal <html:code>false</html:code>
in <html:code>/etc/.java/deployment/deployment.config</html:code>.</ns10:description>
            <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
            <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0060-UX</ns10:reference>
            <ns10:rationale xml:lang="en-US">Without a proper path for the properties file, deployment would not be possible.
If the path specified does not lead to a properties file, the value of the
'deployment.system.config.mandatory' key determines how to handle the situation.
If the value of this key is true, JRE will not run if the path to the properties
file is invalid.</ns10:rationale>
            <ns10:fix id="java_jre_deployment_config_mandatory" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"

grep -q "^deployment.system.config.mandatory=false$" ${JAVA_CONFIG} &amp;&amp; \
sed -i "s/deployment.system.config.mandatory=.*/deployment.system.config.mandatory=false/g" ${JAVA_CONFIG}
if ! [ $? -eq 0 ] ; then
  echo "deployment.system.config.mandatory=false" &gt;&gt; ${JAVA_CONFIG}
fi
</ns10:fix>
            <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_deployment_config_mandatory:def:1"/>
            </ns10:check>
            <ns10:check system="http://scap.nist.gov/schema/ocil/2">
              <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_deployment_config_mandatory_ocil:questionnaire:1"/>
            </ns10:check>
          </ns10:Rule>
          <ns10:Rule id="xccdf_org.ssgproject.content_rule_java_jre_deployment_config_exists" selected="false" severity="medium">
            <ns10:title xml:lang="en-US">The Java Configuration File Exists</ns10:title>
            <ns10:description xml:lang="en-US">If the Java configuration file does not exist, it can be added by running:
<html:pre>$ sudo mkdir -p -m 755 /etc/.java/deployment
$ sudo touch /etc/.java/deployment/deployment.config
$ sudo chmod 644 /etc/.java/deployment/deployment.config</html:pre></ns10:description>
            <ns10:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">DCBP-1</ns10:reference>
            <ns10:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Capp-security-dev">JRE-JRE0070-UX</ns10:reference>
            <ns10:rationale xml:lang="en-US">The deployment.config file is used for specifying the location and execution of
system-level properties for the Java Runtime Environment. By default no
deployment.config file exists; thus, no system-wide deployment.properties file exists.
Without the deployment.config file, setting particular options for the Java
control panel is impossible.</ns10:rationale>
            <ns10:fix id="java_jre_deployment_config_exists" system="urn:xccdf:fix:script:sh">JAVA_CONFIG="/etc/.java/deployment/deployment.config"
JAVA_DIR="/etc/.java/deployment"

if [ ! -d ${JAVA_DIR} ] ; then
  mkdir -p -m 755 ${JAVA_DIR}
fi

if [ ! -e ${JAVA_CONFIG} ]; then
  touch ${JAVA_CONFIG} &amp;&amp; chmod 644 ${JAVA_CONFIG}
fi

chmod 644 ${JAVA_CONFIG}
</ns10:fix>
            <ns10:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
              <ns10:check-content-ref href="ssg-jre-oval.xml" name="oval:ssg-java_jre_deployment_config_exists:def:1"/>
            </ns10:check>
            <ns10:check system="http://scap.nist.gov/schema/ocil/2">
              <ns10:check-content-ref href="ssg-jre-ocil.xml" name="ocil:ssg-java_jre_deployment_config_exists_ocil:questionnaire:1"/>
            </ns10:check>
          </ns10:Rule>
        </ns10:Group>
      </ns10:Group>
    </ns10:Benchmark>
  </ns0:component>
  <ns0:component id="scap_org.open-scap_comp_ssg-jre-cpe-oval.xml" timestamp="2019-11-28T04:47:22">
    <ns3:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <ns3:generator>
        <ns5:product_name>combine_ovals.py from SCAP Security Guide</ns5:product_name>
        <ns5:product_version>ssg: [0, 1, 47], python: 2.7.5</ns5:product_version>
        <ns5:schema_version>5.11</ns5:schema_version>
        <ns5:timestamp>2019-11-28T04:47:18</ns5:timestamp>
      </ns3:generator>
      <ns3:definitions>
        <ns3:definition class="inventory" id="oval:ssg-installed_app_is_java:def:1" version="1">
          <ns3:metadata>
            <ns3:title>Java Runtime Environment</ns3:title>
            <ns3:affected family="unix">
              <ns3:product>Java Runtime Environment</ns3:product>
            </ns3:affected>
            <ns3:reference ref_id="installed_app_is_java" source="CPE"/>
            <ns3:description>The application installed on the system is Java.</ns3:description>
          </ns3:metadata>
          <ns3:criteria operator="OR">
            <ns3:criterion comment="Oracle Java is installed" test_ref="oval:ssg-test_oracle_java:tst:1"/>
            <ns3:criterion comment="Oracle Java from Red Hat" test_ref="oval:ssg-test_oracle_java_rhel:tst:1"/>
            <ns3:criterion comment="IBM Java is installed" test_ref="oval:ssg-test_ibm_java:tst:1"/>
            <ns3:criterion comment="IBM Java from Red Hat" test_ref="oval:ssg-test_ibm_java_rhel:tst:1"/>
            <ns3:criterion comment="Sun Java from Red Hat" test_ref="oval:ssg-test_sun_java_rhel:tst:1"/>
            <ns3:criterion comment="OpenJDK is installed" test_ref="oval:ssg-test_openjdk_java:tst:1"/>
          </ns3:criteria>
        </ns3:definition>
      </ns3:definitions>
      <ns3:tests>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Oracle JRE is installed" id="oval:ssg-test_oracle_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_oracle_java:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Oracle JRE from Red Hat is installed" id="oval:ssg-test_oracle_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_oracle_java_rhel:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="IBM JRE is installed" id="oval:ssg-test_ibm_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_ibm_java:obj:1"/>
          <ns8:state state_ref="oval:ssg-state_ibm_java:ste:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="IBM JRE from Red Hat is installed" id="oval:ssg-test_ibm_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_ibm_java_rhel:obj:1"/>
          <ns8:state state_ref="oval:ssg-state_ibm_java_rhel:ste:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Sun JRE from Red Hat is installed" id="oval:ssg-test_sun_java_rhel:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_sun_java_rhel:obj:1"/>
        </ns8:rpminfo_test>
        <ns8:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Red Hat OpenJDK is installed" id="oval:ssg-test_openjdk_java:tst:1" version="1">
          <ns8:object object_ref="oval:ssg-obj_openjdk_java:obj:1"/>
        </ns8:rpminfo_test>
      </ns3:tests>
      <ns3:objects>
        <ns8:rpminfo_object id="oval:ssg-obj_oracle_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^jre.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_oracle_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*oracle.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_ibm_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^ibm-java.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_ibm_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*ibm.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_sun_java_rhel:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*sun.*$</ns8:name>
        </ns8:rpminfo_object>
        <ns8:rpminfo_object id="oval:ssg-obj_openjdk_java:obj:1" version="1">
          <ns8:name datatype="string" operation="pattern match">^java.*openjdk.*$</ns8:name>
        </ns8:rpminfo_object>
      </ns3:objects>
      <ns3:states>
        <ns8:rpminfo_state id="oval:ssg-state_ibm_java:ste:1" version="1">
          <ns8:evr datatype="evr_string" operation="greater than or equal">.*1.6.0.*</ns8:evr>
        </ns8:rpminfo_state>
        <ns8:rpminfo_state id="oval:ssg-state_ibm_java_rhel:ste:1" version="1">
          <ns8:evr datatype="evr_string" operation="greater than or equal">.*1.6.0.*</ns8:evr>
        </ns8:rpminfo_state>
      </ns3:states>
    </ns3:oval_definitions>
  </ns0:component>
  <ns0:component id="scap_org.open-scap_comp_ssg-jre-cpe-dictionary.xml" timestamp="2019-11-28T04:47:22">
    <ns13:cpe-list xsi:schemaLocation="http://cpe.mitre.org/dictionary/2.0 http://cpe.mitre.org/files/cpe-dictionary_2.1.xsd">
      <ns13:cpe-item name="cpe:/a:oracle:jre">
        <ns13:title xml:lang="en-us">Oracle's Java Runtime Environment</ns13:title>
        <ns13:check href="ssg-jre-cpe-oval.xml" system="http://oval.mitre.org/XMLSchema/oval-definitions-5">oval:ssg-installed_app_is_java:def:1</ns13:check>
      </ns13:cpe-item>
      <ns13:cpe-item name="cpe:/a:ibm:jre">
        <ns13:title xml:lang="en-us">IBM Java Runtime Environment</ns13:title>
        <ns13:check href="ssg-jre-cpe-oval.xml" system="http://oval.mitre.org/XMLSchema/oval-definitions-5">oval:ssg-installed_app_is_java:def:1</ns13:check>
      </ns13:cpe-item>
      <ns13:cpe-item name="cpe:/a:redhat:openjdk">
        <ns13:title xml:lang="en-us">OpenJDK Java Runtime Environment</ns13:title>
        <ns13:check href="ssg-jre-cpe-oval.xml" system="http://oval.mitre.org/XMLSchema/oval-definitions-5">oval:ssg-installed_app_is_java:def:1</ns13:check>
      </ns13:cpe-item>
      <ns13:cpe-item name="cpe:/a:sun:jre">
        <ns13:title xml:lang="en-us">Sun Java Runtime Environment</ns13:title>
        <ns13:check href="ssg-jre-cpe-oval.xml" system="http://oval.mitre.org/XMLSchema/oval-definitions-5">oval:ssg-installed_app_is_java:def:1</ns13:check>
      </ns13:cpe-item>
    </ns13:cpe-list>
  </ns0:component>
</ns0:data-stream-collection>
