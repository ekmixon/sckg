<?xml version="1.0"?>
<Benchmark xmlns:html="http://www.w3.org/1999/xhtml" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="product-name" resolved="false" style="SCAP_1.1" xml:lang="en-US" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.1 xccdf-1.1.4.xsd">
  <status date="2019-11-28">draft</status>
  <title>Guide to the Secure Configuration of Red Hat OpenStack Platform 13</title>
  <description>This guide presents a catalog of security-relevant
configuration settings for Red Hat OpenStack Platform 13. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <tt>scap-security-guide</tt> package which is developed at

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<br/><br/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <em>catalog, not a
checklist</em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <em>Profiles</em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The NIST National Checklist Program (NCP),
which provides required settings for the United States Government, is one example
of a baseline created from this guidance.
</description>
  <notice id="terms_of_use">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</notice>
  <front-matter>The ComplianceAsCode Project<br/>

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</front-matter>
  <rear-matter>Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</rear-matter>
  <platform idref="cpe:/a:redhat:openstack:13"/>
  <version>0.9</version>
  <metadata/>
  <Profile id="stig">
    <title override="true">RHOSP STIG</title>
    <description override="true">Sample profile description.</description>
    <select idref="horizon_file_ownership" selected="true"/>
    <select idref="horizon_file_perms" selected="true"/>
    <select idref="horizon_use_ssl" selected="true"/>
    <select idref="horizon_csrf_cookie_secure" selected="true"/>
    <select idref="horizon_session_cookie_secure" selected="true"/>
    <select idref="horizon_session_cookie_httponly" selected="true"/>
    <select idref="horizon_password_autocomplete" selected="true"/>
    <select idref="horizon_disable_password_reveal" selected="true"/>
    <select idref="cinder_file_ownership" selected="true"/>
    <select idref="cinder_file_perms" selected="true"/>
    <select idref="cinder_using_keystone" selected="true"/>
    <select idref="cinder_tls_enabled" selected="true"/>
    <select idref="cinder_nova_tls" selected="true"/>
    <select idref="cinder_glance_tls" selected="true"/>
    <select idref="cinder_nas_secure_file_permissions" selected="true"/>
    <select idref="cinder_osapi_max_request_body" selected="true"/>
    <select idref="keystone_file_ownership" selected="true"/>
    <select idref="keystone_file_perms" selected="true"/>
    <select idref="keystone_use_ssl" selected="true"/>
    <select idref="keystone_algorithm_hashing" selected="true"/>
    <select idref="keystone_max_request_body_size" selected="true"/>
    <select idref="keystone_disable_admin_token" selected="true"/>
    <select idref="keystone_lockout_failure_attempts" selected="true"/>
    <select idref="keystone_lockout_duration" selected="true"/>
    <select idref="keystone_disable_user_account_days_inactive" selected="true"/>
    <select idref="neutron_file_ownership" selected="true"/>
    <select idref="neutron_file_perms" selected="true"/>
    <select idref="neutron_use_keystone" selected="true"/>
    <select idref="neutron_use_https" selected="true"/>
    <select idref="neutron_api_use_ssl" selected="true"/>
    <select idref="nova_file_ownership" selected="true"/>
    <select idref="nova_file_perms" selected="true"/>
    <select idref="nova_use_keystone" selected="true"/>
    <select idref="nova_secure_authentication" selected="true"/>
    <select idref="nova_secure_glance" selected="true"/>
    <refine-value idref="var_keystone_lockout_failure_attempts" selector="3"/>
    <refine-value idref="var_keystone_lockout_duration" selector="15_minutes"/>
    <refine-value idref="var_keystone_disable_user_account_days_inactive" selector="90"/>
  </Profile>
  <Value id="conditional_clause" type="string">
    <title>A conditional clause for check statements.</title>
    <description>A conditional clause for check statements.</description>
    <value selector="">This is a placeholder</value>
  </Value>
  <Group id="remediation_functions">
    <title>Remediation functions used by the SCAP Security Guide Project</title>
    <description>XCCDF form of the various remediation functions as used by remediation scripts from the SCAP Security Guide Project.</description>
    <Value hidden="true" id="function_create_audit_remediation_unsuccessful_file_modification_detailed" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function create_audit_remediation_unsuccessful_file_modification_detailed</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector="">function create_audit_remediation_unsuccessful_file_modification_detailed {
	mkdir -p "$(dirname "$1")"
	# The - option to mark a here document limit string (&lt;&lt;-EOF) suppresses leading tabs (but not spaces) in the output.
	cat &lt;&lt;-EOF &gt; "$1"
		## This content is a section of an Audit config snapshot recommended for RHEL8 sytems that target OSPP compliance.
		## The following content has been retreived on 2019-03-11 from: https://github.com/linux-audit/audit-userspace/blob/master/rules/30-ospp-v42.rules

		## The purpose of these rules is to meet the requirements for Operating
		## System Protection Profile (OSPP)v4.2. These rules depends on having
		## 10-base-config.rules, 11-loginuid.rules, and 43-module-load.rules installed.

		## Unsuccessful file creation (open with O_CREAT)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S open -F a1&amp;0100 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b32 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create
		-a always,exit -F arch=b64 -S creat -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-create

		## Unsuccessful file modifications (open for write or truncate)
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S openat,open_by_handle_at -F a2&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S open -F a1&amp;01003 -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b32 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification
		-a always,exit -F arch=b64 -S truncate,ftruncate -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-modification

		## Unsuccessful file access (any other opens) This has to go last.
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EACCES -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b32 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
		-a always,exit -F arch=b64 -S open,creat,truncate,ftruncate,openat,open_by_handle_at -F exit=-EPERM -F auid&gt;=1000 -F auid!=unset -F key=unsuccesful-access
	EOF
}</value>
    </Value>
    <Value hidden="true" id="function_die" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function die</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Print a message to stderr and exit the shell
# $1: The message to print.
# $2: The error code (optional, default is 1)
function die {
	local _message="$1" _rc="${2:-1}"
	printf '%s\n' "$_message" &gt;&amp;2
	exit "$_rc"
}</value>
    </Value>
    <Value hidden="true" id="function_ensure_there_are_servers_in_ntp_compatible_config_file" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function ensure_there_are_servers_in_ntp_compatible_config_file</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function ensures that the ntp/chrony config file contains valid server entries
# $1: Path to the config file
# $2: Comma-separated list of servers
function ensure_there_are_servers_in_ntp_compatible_config_file {
	# If invoked with no arguments, exit. This is an intentional behavior.
	[ $# -gt 1 ] || return 0
	[ $# = 2 ] || die "$0 requires zero or exactly two arguments"
	local _config_file="$1" _servers_list="$2"
	if ! grep -q '#[[:space:]]*server' "$_config_file"; then
		for server in $(echo "$_servers_list" | tr ',' '\n') ; do
			printf '\nserver %s iburst' "$server" &gt;&gt; "$_config_file"
		done
	else
		sed -i 's/#[ \t]*server/server/g' "$_config_file"
	fi
}</value>
    </Value>
    <Value hidden="true" id="function_fix_audit_syscall_rule" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function fix_audit_syscall_rule</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo $rule | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}</value>
    </Value>
    <Value hidden="true" id="function_fix_audit_watch_rule" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function fix_audit_watch_rule</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function to fix audit file system object watch rule for given path:
# * if rule exists, also verifies the -w bits match the requirements
# * if rule doesn't exist yet, appends expected rule form to $files_to_inspect
#   audit rules file, depending on the tool which was used to load audit rules
#
# Expects four arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules'
# * path                        	value of -w audit rule's argument
# * required access bits        	value of -p audit rule's argument
# * key                         	value of -k audit rule's argument
#
# Example call:
#
#       fix_audit_watch_rule "auditctl" "/etc/localtime" "wa" "audit_time_rules"
#
function fix_audit_watch_rule {

# Load function arguments into local variables
local tool="$1"
local path="$2"
local required_access_bits="$3"
local key="$4"

# Check sanity of the input
if [ $# -ne "4" ]
then
	echo "Usage: fix_audit_watch_rule 'tool' 'path' 'bits' 'key'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
#
# -----------------------------------------------------------------------------------------
# Tool used to load audit rules	| Rule already defined	|  Audit rules file to inspect	  |
# -----------------------------------------------------------------------------------------
#	auditctl		|     Doesn't matter	|  /etc/audit/audit.rules	  |
# -----------------------------------------------------------------------------------------
# 	augenrules		|          Yes		|  /etc/audit/rules.d/*.rules	  |
# 	augenrules		|          No		|  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
declare -a files_to_inspect
files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# into the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules')
# If the audit is 'augenrules', then check if rule is already defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to list of files for inspection.
# If rule isn't defined, add '/etc/audit/rules.d/$key.rules' to list of files for inspection.
elif [ "$tool" == 'augenrules' ]
then
	readarray -t matches &lt; &lt;(grep -P "[\s]*-w[\s]+$path" /etc/audit/rules.d/*.rules)

	# For each of the matched entries
	for match in "${matches[@]}"
	do
		# Extract filepath from the match
		rulesd_audit_file=$(echo $match | cut -f1 -d ':')
		# Append that path into list of files for inspection
		files_to_inspect+=("$rulesd_audit_file")
	done
	# Case when particular audit rule isn't defined yet
	if [ "${#files_to_inspect[@]}" -eq "0" ]
	then
		# Append '/etc/audit/rules.d/$key.rules' into list of files for inspection
		local key_rule_file="/etc/audit/rules.d/$key.rules"
		# If the $key.rules file doesn't exist yet, create it with correct permissions
		if [ ! -e "$key_rule_file" ]
		then
			touch "$key_rule_file"
			chmod 0640 "$key_rule_file"
		fi

		files_to_inspect+=("$key_rule_file")
	fi
fi

# Finally perform the inspection and possible subsequent audit rule
# correction for each of the files previously identified for inspection
for audit_rules_file in "${files_to_inspect[@]}"
do

	# Check if audit watch file system object rule for given path already present
	if grep -q -P -- "[\s]*-w[\s]+$path" "$audit_rules_file"
	then
		# Rule is found =&gt; verify yet if existing rule definition contains
		# all of the required access type bits

		# Escape slashes in path for use in sed pattern below
		local esc_path=${path//$'/'/$'\/'}
		# Define BRE whitespace class shortcut
		local sp="[[:space:]]"
		# Extract current permission access types (e.g. -p [r|w|x|a] values) from audit rule
		current_access_bits=$(sed -ne "s/$sp*-w$sp\+$esc_path$sp\+-p$sp\+\([rxwa]\{1,4\}\).*/\1/p" "$audit_rules_file")
		# Split required access bits string into characters array
		# (to check bit's presence for one bit at a time)
		for access_bit in $(echo "$required_access_bits" | grep -o .)
		do
			# For each from the required access bits (e.g. 'w', 'a') check
			# if they are already present in current access bits for rule.
			# If not, append that bit at the end
			if ! grep -q "$access_bit" &lt;&lt;&lt; "$current_access_bits"
			then
				# Concatenate the existing mask with the missing bit
				current_access_bits="$current_access_bits$access_bit"
			fi
		done
		# Propagate the updated rule's access bits (original + the required
		# ones) back into the /etc/audit/audit.rules file for that rule
		sed -i "s/\($sp*-w$sp\+$esc_path$sp\+-p$sp\+\)\([rxwa]\{1,4\}\)\(.*\)/\1$current_access_bits\3/" "$audit_rules_file"
	else
		# Rule isn't present yet. Append it at the end of $audit_rules_file file
		# with proper key

		echo "-w $path -p $required_access_bits -k $key" &gt;&gt; "$audit_rules_file"
	fi
done
}</value>
    </Value>
    <Value hidden="true" id="function_include_merge_files_by_lines" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function include_merge_files_by_lines</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector="">function include_merge_files_by_lines {
	:
}

# 1: Filename of the "master" file
# 2: Filename of the newly created file
function create_empty_file_like {
	local lines_count
	lines_count=$(cat "$1" | wc -l)
	for _ in $(seq 1 "$lines_count"); do
		printf '\n' &gt;&gt; "$2"
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
function second_file_is_same_except_newlines {
	local lines_of_master lines_of_sample len_of_master line_number i
	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	len_of_master="${#lines_of_master[@]}"
	if test "$len_of_master" != "${#lines_of_sample[@]}"; then
		echo "Files '$1' and '$2' have different number of lines, $len_of_master and ${#lines_of_sample[@]} respectively."
		return 1
	fi

	for line_number in $(seq 1 "$len_of_master"); do
		i=$((line_number - 1))
		test -n "${lines_of_sample[$i]}" || continue
		if test "${lines_of_master[$i]}" != "${lines_of_sample[$i]}"; then
			echo "Line $line_number is different in files '$1' and '$2'."
			return 1
		fi
	done
}


# 1: Filename of the "master" file
# 2: Filename of sample flie
# 3: List of indices (1-based, space-separated string)
function merge_first_lines_to_second_on_indices {
	local lines_of_master lines_of_sample line_number i
	test -f "$2" || create_empty_file_like "$1" "$2"

	readarray -t lines_of_master &lt; "$1"
	readarray -t lines_of_sample &lt; "$2"

	error_msg="$(second_file_is_same_except_newlines "$1" "$2")"
	if test $? != 0; then
		echo "Error merging lines into '$2': $error_msg" &gt;&amp;2
		return 1
	fi

	for line_number in $3; do
		i=$((line_number - 1))
		lines_of_sample[$i]="${lines_of_master[$i]}"
	done

	printf "%s\n" "${lines_of_sample[@]}" &gt; "$2"
}</value>
    </Value>
    <Value hidden="true" id="function_include_mount_options_functions" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function include_mount_options_functions</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector="">function include_mount_options_functions {
	:
}

# $1: type of filesystem
# $2: new mount point option
# $3: filesystem of new mount point (used when adding new entry in fstab)
# $4: mount type of new mount point (used when adding new entry in fstab)
function ensure_mount_option_for_vfstype {
        local _vfstype="$1" _new_opt="$2" _filesystem=$3 _type=$4 _vfstype_points=()
        readarray -t _vfstype_points &lt; &lt;(grep -E "[[:space:]]${_vfstype}[[:space:]]" /etc/fstab | awk '{print $2}')

        for _vfstype_point in "${_vfstype_points[@]}"
        do
                ensure_mount_option_in_fstab "$_vfstype_point" "$_new_opt" "$_filesystem" "$_type"
        done
}

# $1: mount point
# $2: new mount point option
# $3: device or virtual string (used when adding new entry in fstab)
# $4: mount type of mount point (used when adding new entry in fstab)
function ensure_mount_option_in_fstab {
	local _mount_point="$1" _new_opt="$2" _device=$3 _type=$4
	local _mount_point_match_regexp="" _previous_mount_opts=""
	_mount_point_match_regexp="$(get_mount_point_regexp "$_mount_point")"

	if [ "$(grep -c "$_mount_point_match_regexp" /etc/fstab)" -eq 0 ]; then
		# runtime opts without some automatic kernel/userspace-added defaults
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/mtab | head -1 |  awk '{print $4}' \
					| sed -E "s/(rw|defaults|seclabel|${_new_opt})(,|$)//g;s/,$//")
		[ "$_previous_mount_opts" ] &amp;&amp; _previous_mount_opts+=","
		echo "${_device} ${_mount_point} ${_type} defaults,${_previous_mount_opts}${_new_opt} 0 0" &gt;&gt; /etc/fstab
	elif [ "$(grep "$_mount_point_match_regexp" /etc/fstab | grep -c "$_new_opt")" -eq 0 ]; then
		_previous_mount_opts=$(grep "$_mount_point_match_regexp" /etc/fstab | awk '{print $4}')
		sed -i "s|\(${_mount_point_match_regexp}.*${_previous_mount_opts}\)|\1,${_new_opt}|" /etc/fstab
	fi
}

# $1: mount point
function get_mount_point_regexp {
		printf "[[:space:]]%s[[:space:]]" "$1"
}

# $1: mount point
function assert_mount_point_in_fstab {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	grep "$_mount_point_match_regexp" -q /etc/fstab \
		|| { echo "The mount point '$1' is not even in /etc/fstab, so we can't set up mount options" &gt;&amp;2; return 1; }
}

# $1: mount point
function remove_defaults_from_fstab_if_overriden {
	local _mount_point_match_regexp
	_mount_point_match_regexp="$(get_mount_point_regexp "$1")"
	if grep "$_mount_point_match_regexp" /etc/fstab | grep -q "defaults,"
	then
		sed -i "s|\(${_mount_point_match_regexp}.*\)defaults,|\1|" /etc/fstab
	fi
}

# $1: mount point
function ensure_partition_is_mounted {
	local _mount_point="$1"
	mkdir -p "$_mount_point" || return 1
	if mountpoint -q "$_mount_point"; then
		mount -o remount --target "$_mount_point"
	else
		mount --target "$_mount_point"
	fi
}</value>
    </Value>
    <Value hidden="true" id="function_include_set_faillock_option" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function include_set_faillock_option</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector="">function include_set_faillock_option {
	:
}

function insert_preauth {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	# is auth required pam_faillock.so preauth present?
	if grep -qE "^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$" "$pam_file" ; then
		# is the option set?
		if grep -qE "^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$option=([0-9]*).*$" "$pam_file" ; then
			# just change the value of option to a correct value
			sed -i --follow-symlinks "s/\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\)\($option *= *\).*/\1\2$value/" "$pam_file"
		# the option is not set.
		else
			# append the option
			sed -i --follow-symlinks "/^auth.*required.*pam_faillock.so.*preauth.*silent.*/ s/$/ $option=$value/" "$pam_file"
		fi
	# auth required pam_faillock.so preauth is not present, insert the whole line
	else
		sed -i --follow-symlinks "/^auth.*sufficient.*pam_unix.so.*/i auth        required      pam_faillock.so preauth silent $option=$value" "$pam_file"
	fi
}

function insert_authfail {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	# is auth default pam_faillock.so authfail present?
	if grep -qE "^\s*auth\s+(\[default=die\])\s+pam_faillock\.so\s+authfail.*$" "$pam_file" ; then
		# is the option set?
		if grep -qE "^\s*auth\s+(\[default=die\])\s+pam_faillock\.so\s+authfail.*$option=([0-9]*).*$" "$pam_file" ; then
			# just change the value of option to a correct value
			sed -i --follow-symlinks "s/\(^auth.*[default=die].*pam_faillock.so.*authfail.*\)\($option *= *\).*/\1\2$value/" "$pam_file"
		# the option is not set.
		else
			# append the option
			sed -i --follow-symlinks "/^auth.*[default=die].*pam_faillock.so.*authfail.*/ s/$/ $option=$value/" "$pam_file"
		fi
	# auth default pam_faillock.so authfail is not present, insert the whole line
	else
		sed -i --follow-symlinks "/^auth.*sufficient.*pam_unix.so.*/a auth        [default=die] pam_faillock.so authfail $option=$value" "$pam_file"
	fi
}

function insert_account {
	local pam_file="$1"
	if ! grep -qE "^\s*account\s+required\s+pam_faillock\.so.*$" "$pam_file" ; then
		sed -E -i --follow-symlinks "/^\s*account\s*required\s*pam_unix.so/i account     required      pam_faillock.so" "$pam_file"
	fi
}

function set_faillock_option {
	local pam_file="$1"
	local option="$2"
	local value="$3"
	insert_preauth "$pam_file" "$option" "$value"
	insert_authfail "$pam_file" "$option" "$value"
	insert_account "$pam_file"
}</value>
    </Value>
    <Value hidden="true" id="function_perform_audit_adjtimex_settimeofday_stime_remediation" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function perform_audit_adjtimex_settimeofday_stime_remediation</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function to fix syscall audit rule for given system call. It is
# based on example audit syscall rule definitions as outlined in
# /usr/share/doc/audit-2.3.7/stig.rules file provided with the audit
# package. It will combine multiple system calls belonging to the same
# syscall group into one audit rule (rather than to create audit rule per
# different system call) to avoid audit infrastructure performance penalty
# in the case of 'one-audit-rule-definition-per-one-system-call'. See:
#
#   https://www.redhat.com/archives/linux-audit/2014-November/msg00009.html
#
# for further details.
#
# Expects five arguments (each of them is required) in the form of:
# * audit tool				tool used to load audit rules,
# 					either 'auditctl', or 'augenrules
# * audit rules' pattern		audit rule skeleton for same syscall
# * syscall group			greatest common string this rule shares
# 					with other rules from the same group
# * architecture			architecture this rule is intended for
# * full form of new rule to add	expected full form of audit rule as to be
# 					added into audit.rules file
#
# Note: The 2-th up to 4-th arguments are used to determine how many existing
# audit rules will be inspected for resemblance with the new audit rule
# (5-th argument) the function is going to add. The rule's similarity check
# is performed to optimize audit.rules definition (merge syscalls of the same
# group into one rule) to avoid the "single-syscall-per-audit-rule" performance
# penalty.
#
# Example call:
#
#	See e.g. 'audit_rules_file_deletion_events.sh' remediation script
#
function fix_audit_syscall_rule {

# Load function arguments into local variables
local tool="$1"
local pattern="$2"
local group="$3"
local arch="$4"
local full_rule="$5"

# Check sanity of the input
if [ $# -ne "5" ]
then
	echo "Usage: fix_audit_syscall_rule 'tool' 'pattern' 'group' 'arch' 'full rule'"
	echo "Aborting."
	exit 1
fi

# Create a list of audit *.rules files that should be inspected for presence and correctness
# of a particular audit rule. The scheme is as follows:
# 
# -----------------------------------------------------------------------------------------
#  Tool used to load audit rules | Rule already defined  |  Audit rules file to inspect    |
# -----------------------------------------------------------------------------------------
#        auditctl                |     Doesn't matter    |  /etc/audit/audit.rules         |
# -----------------------------------------------------------------------------------------
#        augenrules              |          Yes          |  /etc/audit/rules.d/*.rules     |
#        augenrules              |          No           |  /etc/audit/rules.d/$key.rules  |
# -----------------------------------------------------------------------------------------
#
declare -a files_to_inspect

retval=0

# First check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	return 1
# If audit tool is 'auditctl', then add '/etc/audit/audit.rules'
# file to the list of files to be inspected
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect+=('/etc/audit/audit.rules' )
# If audit tool is 'augenrules', then check if the audit rule is defined
# If rule is defined, add '/etc/audit/rules.d/*.rules' to the list for inspection
# If rule isn't defined yet, add '/etc/audit/rules.d/$key.rules' to the list for inspection
elif [ "$tool" == 'augenrules' ]
then
	# Extract audit $key from audit rule so we can use it later
	key=$(expr "$full_rule" : '.*-k[[:space:]]\([^[:space:]]\+\)' '|' "$full_rule" : '.*-F[[:space:]]key=\([^[:space:]]\+\)')
	readarray -t matches &lt; &lt;(sed -s -n -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d;F" /etc/audit/rules.d/*.rules)
	if [ $? -ne 0 ]
	then
		retval=1
	fi
	for match in "${matches[@]}"
	do
		files_to_inspect+=("${match}")
	done
	# Case when particular rule isn't defined in /etc/audit/rules.d/*.rules yet
	if [ ${#files_to_inspect[@]} -eq "0" ]
	then
		file_to_inspect="/etc/audit/rules.d/$key.rules"
		files_to_inspect=("$file_to_inspect")
		if [ ! -e "$file_to_inspect" ]
		then
			touch "$file_to_inspect"
			chmod 0640 "$file_to_inspect"
		fi
	fi
fi

#
# Indicator that we want to append $full_rule into $audit_file by default
local append_expected_rule=0

for audit_file in "${files_to_inspect[@]}"
do
	# Filter existing $audit_file rules' definitions to select those that:
	# * follow the rule pattern, and
	# * meet the hardware architecture requirement, and
	# * are current syscall group specific
	readarray -t existing_rules &lt; &lt;(sed -e "\;${pattern};!d" -e "/${arch}/!d" -e "/${group}/!d"  "$audit_file")
	if [ $? -ne 0 ]
	then
		retval=1
	fi

	# Process rules found case-by-case
	for rule in "${existing_rules[@]}"
	do
		# Found rule is for same arch &amp; key, but differs (e.g. in count of -S arguments)
		if [ "${rule}" != "${full_rule}" ]
		then
			# If so, isolate just '(-S \w)+' substring of that rule
			rule_syscalls=$(echo $rule | grep -o -P '(-S \w+ )+')
			# Check if list of '-S syscall' arguments of that rule is subset
			# of '-S syscall' list of expected $full_rule
			if grep -q -- "$rule_syscalls" &lt;&lt;&lt; "$full_rule"
			then
				# Rule is covered (i.e. the list of -S syscalls for this rule is
				# subset of -S syscalls of $full_rule =&gt; existing rule can be deleted
				# Thus delete the rule from audit.rules &amp; our array
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi
				existing_rules=("${existing_rules[@]//$rule/}")
			else
				# Rule isn't covered by $full_rule - it besides -S syscall arguments
				# for this group contains also -S syscall arguments for other syscall
				# group. Example: '-S lchown -S fchmod -S fchownat' =&gt; group='chown'
				# since 'lchown' &amp; 'fchownat' share 'chown' substring
				# Therefore:
				# * 1) delete the original rule from audit.rules
				# (original '-S lchown -S fchmod -S fchownat' rule would be deleted)
				# * 2) delete the -S syscall arguments for this syscall group, but
				# keep those not belonging to this syscall group
				# (original '-S lchown -S fchmod -S fchownat' would become '-S fchmod'
				# * 3) append the modified (filtered) rule again into audit.rules
				# if the same rule not already present
				#
				# 1) Delete the original rule
				sed -i -e "\;${rule};d" "$audit_file"
				if [ $? -ne 0 ]
				then
					retval=1
				fi

				# 2) Delete syscalls for this group, but keep those from other groups
				# Convert current rule syscall's string into array splitting by '-S' delimiter
				IFS_BKP="$IFS"
				IFS=$'-S'
				read -a rule_syscalls_as_array &lt;&lt;&lt; "$rule_syscalls"
				# Reset IFS back to default
				IFS="$IFS_BKP"
				# Splitting by "-S" can't be replaced by the readarray functionality easily

				# Declare new empty string to hold '-S syscall' arguments from other groups
				new_syscalls_for_rule=''
				# Walk through existing '-S syscall' arguments
				for syscall_arg in "${rule_syscalls_as_array[@]}"
				do
					# Skip empty $syscall_arg values
					if [ "$syscall_arg" == '' ]
					then
						continue
					fi
					# If the '-S syscall' doesn't belong to current group add it to the new list
					# (together with adding '-S' delimiter back for each of such item found)
					if grep -q -v -- "$group" &lt;&lt;&lt; "$syscall_arg"
					then
						new_syscalls_for_rule="$new_syscalls_for_rule -S $syscall_arg"
					fi
				done
				# Replace original '-S syscall' list with the new one for this rule
				updated_rule=${rule//$rule_syscalls/$new_syscalls_for_rule}
				# Squeeze repeated whitespace characters in rule definition (if any) into one
				updated_rule=$(echo "$updated_rule" | tr -s '[:space:]')
				# 3) Append the modified / filtered rule again into audit.rules
				#    (but only in case it's not present yet to prevent duplicate definitions)
				if ! grep -q -- "$updated_rule" "$audit_file"
				then
					echo "$updated_rule" &gt;&gt; "$audit_file"
				fi
			fi
		else
			# $audit_file already contains the expected rule form for this
			# architecture &amp; key =&gt; don't insert it second time
			append_expected_rule=1
		fi
	done

	# We deleted all rules that were subset of the expected one for this arch &amp; key.
	# Also isolated rules containing system calls not from this system calls group.
	# Now append the expected rule if it's not present in $audit_file yet
	if [[ ${append_expected_rule} -eq "0" ]]
	then
		echo "$full_rule" &gt;&gt; "$audit_file"
	fi
done

return $retval

}


# Function to perform remediation for the 'adjtimex', 'settimeofday', and 'stime' audit
# system calls on RHEL, Fedora or OL systems.
# Remediation performed for both possible tools: 'auditctl' and 'augenrules'.
#
# Note: 'stime' system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
# therefore excluded from the list of time group system calls to be audited on this arch
#
# Example Call:
#
#      perform_audit_adjtimex_settimeofday_stime_remediation
#
function perform_audit_adjtimex_settimeofday_stime_remediation {

# Retrieve hardware architecture of the underlying system
[ "$(getconf LONG_BIT)" = "32" ] &amp;&amp; RULE_ARCHS=("b32") || RULE_ARCHS=("b32" "b64")

for ARCH in "${RULE_ARCHS[@]}"
do

	PATTERN="-a always,exit -F arch=${ARCH} -S .* -k *"
	# Create expected audit group and audit rule form for particular system call &amp; architecture
	if [ ${ARCH} = "b32" ]
	then
		# stime system call is known at 32-bit arch (see e.g "$ ausyscall i386 stime" 's output)
		# so append it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\|stime\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -S stime -k audit_time_rules"
	elif [ ${ARCH} = "b64" ]
	then
		# stime system call isn't known at 64-bit arch (see "$ ausyscall x86_64 stime" 's output)
		# therefore don't add it to the list of time group system calls to be audited
		GROUP="\(adjtimex\|settimeofday\)"
		FULL_RULE="-a always,exit -F arch=${ARCH} -S adjtimex -S settimeofday -k audit_time_rules"
	fi
	# Perform the remediation for both possible tools: 'auditctl' and 'augenrules'
	fix_audit_syscall_rule "auditctl" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
	fix_audit_syscall_rule "augenrules" "$PATTERN" "$GROUP" "$ARCH" "$FULL_RULE"
done

}</value>
    </Value>
    <Value hidden="true" id="function_perform_audit_rules_privileged_commands_remediation" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function perform_audit_rules_privileged_commands_remediation</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function to perform remediation for 'audit_rules_privileged_commands' rule
#
# Expects two arguments:
#
# audit_tool		tool used to load audit rules
# 			One of 'auditctl' or 'augenrules'
#
# min_auid		Minimum original ID the user logged in with
# 			'500' for RHEL-6 and before, '1000' for RHEL-7 and after.
#
# Example Call(s):
#
#      perform_audit_rules_privileged_commands_remediation "auditctl" "500"
#      perform_audit_rules_privileged_commands_remediation "augenrules"	"1000"
#
function perform_audit_rules_privileged_commands_remediation {
#
# Load function arguments into local variables
local tool="$1"
local min_auid="$2"

# Check sanity of the input
if [ $# -ne "2" ]
then
	echo "Usage: perform_audit_rules_privileged_commands_remediation 'auditctl | augenrules' '500 | 1000'"
	echo "Aborting."
	exit 1
fi

declare -a files_to_inspect=()

# Check sanity of the specified audit tool
if [ "$tool" != 'auditctl' ] &amp;&amp; [ "$tool" != 'augenrules' ]
then
	echo "Unknown audit rules loading tool: $1. Aborting."
	echo "Use either 'auditctl' or 'augenrules'!"
	exit 1
# If the audit tool is 'auditctl', then:
# * add '/etc/audit/audit.rules'to the list of files to be inspected,
# * specify '/etc/audit/audit.rules' as the output audit file, where
#   missing rules should be inserted
elif [ "$tool" == 'auditctl' ]
then
	files_to_inspect=("/etc/audit/audit.rules")
	output_audit_file="/etc/audit/audit.rules"
#
# If the audit tool is 'augenrules', then:
# * add '/etc/audit/rules.d/*.rules' to the list of files to be inspected
#   (split by newline),
# * specify /etc/audit/rules.d/privileged.rules' as the output file, where
#   missing rules should be inserted
elif [ "$tool" == 'augenrules' ]
then
	readarray -t files_to_inspect &lt; &lt;(find /etc/audit/rules.d -maxdepth 1 -type f -name '*.rules' -print)
	output_audit_file="/etc/audit/rules.d/privileged.rules"
fi

# Obtain the list of SUID/SGID binaries on the particular system (split by newline)
# into privileged_binaries array
readarray -t privileged_binaries &lt; &lt;(find / -xdev -type f -perm -4000 -o -type f -perm -2000 2&gt;/dev/null)

# Keep list of SUID/SGID binaries that have been already handled within some previous iteration
declare -a sbinaries_to_skip=()

# For each found sbinary in privileged_binaries list
for sbinary in "${privileged_binaries[@]}"
do

	# Check if this sbinary wasn't already handled in some of the previous sbinary iterations
	# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
	if [[ $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
	then
		# If so, don't process it second time &amp; go to process next sbinary
		continue
	fi

	# Reset the counter of inspected files when starting to check
	# presence of existing audit rule for new sbinary
	local count_of_inspected_files=0

	# Define expected rule form for this binary
	expected_rule="-a always,exit -F path=${sbinary} -F perm=x -F auid&gt;=${min_auid} -F auid!=unset -k privileged"

	# If list of audit rules files to be inspected is empty, just add new rule and move on to next binary
	if [[ ${#files_to_inspect[@]} -eq 0 ]]; then
		echo "$expected_rule" &gt;&gt; "$output_audit_file"
		continue
	fi

	# Replace possible slash '/' character in sbinary definition so we could use it in sed expressions below
	sbinary_esc=${sbinary//$'/'/$'\/'}

	# For each audit rules file from the list of files to be inspected
	for afile in "${files_to_inspect[@]}"
	do

		# Search current audit rules file's content for match. Match criteria:
		# * existing rule is for the same SUID/SGID binary we are currently processing (but
		#   can contain multiple -F path= elements covering multiple SUID/SGID binaries)
		# * existing rule contains all arguments from expected rule form (though can contain
		#   them in arbitrary order)
	
		base_search=$(sed -e '/-a always,exit/!d' -e '/-F path='"${sbinary_esc}"'/!d'		\
				-e '/-F path=[^[:space:]]\+/!d'   -e '/-F perm=.*/!d'						\
				-e '/-F auid&gt;='"${min_auid}"'/!d' -e '/-F auid!=\(4294967295\|unset\)/!d'	\
				-e '/-k \|-F key=/!d' "$afile")

		# Increase the count of inspected files for this sbinary
		count_of_inspected_files=$((count_of_inspected_files + 1))

		# Require execute access type to be set for existing audit rule
		exec_access='x'

		# Search current audit rules file's content for presence of rule pattern for this sbinary
		if [[ $base_search ]]
		then

			# Current audit rules file already contains rule for this binary =&gt;
			# Store the exact form of found rule for this binary for further processing
			concrete_rule=$base_search

			# Select all other SUID/SGID binaries possibly also present in the found rule

			readarray -t handled_sbinaries &lt; &lt;(grep -o -e "-F path=[^[:space:]]\+" &lt;&lt;&lt; "$concrete_rule")
			handled_sbinaries=("${handled_sbinaries[@]//-F path=/}")

			# Merge the list of such SUID/SGID binaries found in this iteration with global list ignoring duplicates
			readarray -t sbinaries_to_skip &lt; &lt;(for i in "${sbinaries_to_skip[@]}" "${handled_sbinaries[@]}"; do echo "$i"; done | sort -du)

			# Separate concrete_rule into three sections using hash '#'
			# sign as a delimiter around rule's permission section borders
			concrete_rule="$(echo "$concrete_rule" | sed -n "s/\(.*\)\+\(-F perm=[rwax]\+\)\+/\1#\2#/p")"

			# Split concrete_rule into head, perm, and tail sections using hash '#' delimiter

			rule_head=$(cut -d '#' -f 1 &lt;&lt;&lt; "$concrete_rule")
			rule_perm=$(cut -d '#' -f 2 &lt;&lt;&lt; "$concrete_rule")
			rule_tail=$(cut -d '#' -f 3 &lt;&lt;&lt; "$concrete_rule")

			# Extract already present exact access type [r|w|x|a] from rule's permission section
			access_type=${rule_perm//-F perm=/}

			# Verify current permission access type(s) for rule contain 'x' (execute) permission
			if ! grep -q "$exec_access" &lt;&lt;&lt; "$access_type"
			then

				# If not, append the 'x' (execute) permission to the existing access type bits
				access_type="$access_type$exec_access"
				# Reconstruct the permissions section for the rule
				new_rule_perm="-F perm=$access_type"
				# Update existing rule in current audit rules file with the new permission section
				sed -i "s#${rule_head}\(.*\)${rule_tail}#${rule_head}${new_rule_perm}${rule_tail}#" "$afile"

			fi

		# If the required audit rule for particular sbinary wasn't found yet, insert it under following conditions:
		#
		# * in the "auditctl" mode of operation insert particular rule each time
		#   (because in this mode there's only one file -- /etc/audit/audit.rules to be inspected for presence of this rule),
		#
		# * in the "augenrules" mode of operation insert particular rule only once and only in case we have already
		#   searched all of the files from /etc/audit/rules.d/*.rules location (since that audit rule can be defined
		#   in any of those files and if not, we want it to be inserted only once into /etc/audit/rules.d/privileged.rules file)
		#
		elif [ "$tool" == "auditctl" ] || [[ "$tool" == "augenrules" &amp;&amp; $count_of_inspected_files -eq "${#files_to_inspect[@]}" ]]
		then

			# Check if this sbinary wasn't already handled in some of the previous afile iterations
			# Return match only if whole sbinary definition matched (not in the case just prefix matched!!!)
			if [[ ! $(sed -ne "\|${sbinary}|p" &lt;&lt;&lt; "${sbinaries_to_skip[*]}") ]]
			then
				# Current audit rules file's content doesn't contain expected rule for this
				# SUID/SGID binary yet =&gt; append it
				echo "$expected_rule" &gt;&gt; "$output_audit_file"
			fi

			continue
		fi

	done

done
}</value>
    </Value>
    <Value hidden="true" id="function_populate" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function populate</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># The populate function isn't directly used by SSG at the moment but it can be 
# used for testing purposes and will be used in SSG Testsuite in the future.

function populate {
# code to populate environment variables needed (for unit testing)
if [ -z "${!1}" ]; then
	echo "$1 is not defined. Exiting."
	exit
fi
}</value>
    </Value>
    <Value hidden="true" id="function_replace_or_append" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function replace_or_append</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector=""># Function to replace configuration setting in config file or add the configuration setting if
# it does not exist.
#
# Expects arguments:
#
# config_file:		Configuration file that will be modified
# key:			Configuration option to change
# value:		Value of the configuration option to change
# cce:			The CCE identifier or '@CCENUM@' if no CCE identifier exists
# format:		The printf-like format string that will be given stripped key and value as arguments,
#			so e.g. '%s=%s' will result in key=value subsitution (i.e. without spaces around =)
#
# Optional arugments:
#
# format:		Optional argument to specify the format of how key/value should be
# 			modified/appended in the configuration file. The default is key = value.
#
# Example Call(s):
#
#     With default format of 'key = value':
#     replace_or_append '/etc/sysctl.conf' '^kernel.randomize_va_space' '2' '@CCENUM@'
#
#     With custom key/value format:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' 'disabled' '@CCENUM@' '%s=%s'
#
#     With a variable:
#     replace_or_append '/etc/sysconfig/selinux' '^SELINUX=' $var_selinux_state '@CCENUM@' '%s=%s'
#
function replace_or_append {
  local default_format='%s = %s' case_insensitive_mode=yes sed_case_insensitive_option='' grep_case_insensitive_option=''
  local config_file=$1
  local key=$2
  local value=$3
  local cce=$4
  local format=$5

  if [ "$case_insensitive_mode" = yes ]; then
    sed_case_insensitive_option="i"
    grep_case_insensitive_option="-i"
  fi
  [ -n "$format" ] || format="$default_format"
  # Check sanity of the input
  [ $# -ge "3" ] || { echo "Usage: replace_or_append &lt;config_file_location&gt; &lt;key_to_search&gt; &lt;new_value&gt; [&lt;CCE number or literal '@CCENUM@' if unknown&gt;] [printf-like format, default is '$default_format']" &gt;&amp;2; exit 1; }

  # Test if the config_file is a symbolic link. If so, use --follow-symlinks with sed.
  # Otherwise, regular sed command will do.
  sed_command=('sed' '-i')
  if test -L "$config_file"; then
    sed_command+=('--follow-symlinks')
  fi

  # Test that the cce arg is not empty or does not equal @CCENUM@.
  # If @CCENUM@ exists, it means that there is no CCE assigned.
  if [ -n "$cce" ] &amp;&amp; [ "$cce" != '@CCENUM@' ]; then
    cce="${cce}"
  else
    cce="CCE"
  fi

  # Strip any search characters in the key arg so that the key can be replaced without
  # adding any search characters to the config file.
  stripped_key=$(sed 's/[\^=\$,;+]*//g' &lt;&lt;&lt; "$key")

  # shellcheck disable=SC2059
  printf -v formatted_output "$format" "$stripped_key" "$value"

  # If the key exists, change it. Otherwise, add it to the config_file.
  # We search for the key string followed by a word boundary (matched by \&gt;),
  # so if we search for 'setting', 'setting2' won't match.
  if LC_ALL=C grep -q -m 1 $grep_case_insensitive_option -e "${key}\\&gt;" "$config_file"; then
    "${sed_command[@]}" "s/${key}\\&gt;.*/$formatted_output/g$sed_case_insensitive_option" "$config_file"
  else
    # \n is precaution for case where file ends without trailing newline
    printf '\n# Per %s: Set %s in %s\n' "$cce" "$formatted_output" "$config_file" &gt;&gt; "$config_file"
    printf '%s\n' "$formatted_output" &gt;&gt; "$config_file"
  fi
}</value>
    </Value>
    <Value hidden="true" id="function_set_faillock_option_to_value_in_pam_file" interactive="0" operator="equals" prohibitChanges="true" type="string">
      <title>Remediation function set_faillock_option_to_value_in_pam_file</title>
      <description>Shared bash remediation function. Not intended to be changed by tailoring.</description>
      <value selector="">function set_faillock_option_to_value_in_pam_file {
	# If invoked with no arguments, exit. This is an intentional behavior.
	[ $# -gt 1 ] || return 0
	[ $# -ge 3 ] || die "$0 requires exactly zero, three, or four arguments"
	[ $# -le 4 ] || die "$0 requires exactly zero, three, or four arguments"
	local _pamFile="$1" _option="$2" _value="$3" _insert_lines_callback="$4"
	# pam_faillock.so already present?
	if grep -q "^auth.*pam_faillock.so.*" "$_pamFile"; then

		# pam_faillock.so present, is the option present?
		if grep -q "^auth.*[default=die].*pam_faillock.so.*authfail.*$_option=" "$_pamFile"; then

			# both pam_faillock.so &amp; option present, just correct option to the right value
			sed -i --follow-symlinks "s/\(^auth.*required.*pam_faillock.so.*preauth.*silent.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"
			sed -i --follow-symlinks "s/\(^auth.*[default=die].*pam_faillock.so.*authfail.*\)\($_option *= *\).*/\1\2$_value/" "$_pamFile"

		# pam_faillock.so present, but the option not yet
		else

			# append correct option value to appropriate places
			sed -i --follow-symlinks "/^auth.*required.*pam_faillock.so.*preauth.*silent.*/ s/$/ $_option=$_value/" "$_pamFile"
			sed -i --follow-symlinks "/^auth.*[default=die].*pam_faillock.so.*authfail.*/ s/$/ $_option=$_value/" "$_pamFile"
		fi

	# pam_faillock.so not present yet
	else
		test -z "$_insert_lines_callback" || "$_insert_lines_callback" "$_option" "$_value" "$_pamFile"
		# insert pam_faillock.so preauth &amp; authfail rows with proper value of the option in question
	fi
}</value>
    </Value>
  </Group>
  <Group id="openstack" prodtype="rhosp13">
    <title>OpenStack</title>
    <description>TODO TODO TODO</description>
    <Group id="neutron_container" prodtype="rhosp13">
      <title>Neutron Configuration Checklist</title>
      <description>Security configuration requirements for Neutron.</description>
      <Rule id="container_neutron_file_ownership" prodtype="rhosp13" severity="medium">
        <title>Check-Neutron-01: Is user/group ownership of config files set to root/neutron?</title>
        <description>Configuration files contain critical parameters and information required
for smooth functioning of the component. If an unprivileged user, either
intentionally or accidentally modifies or deletes any of the parameters
or the file itself then it would cause severe availability issues causing
a denial of service to the other end users. Thus user ownership of such
critical configuration files must be set to root and group ownership
must be set to neutron.
<br/>
<br/>
Run the following commands:

<pre>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf | egrep "root neutron"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/neutron/etc/neutron/api-paste.ini | egrep "root neutron"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/neutron/etc/neutron/policy.json | egrep "root neutron"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/neutron/etc/neutron/rootwrap.conf | egrep "root neutron"
</pre>

Pass: If user and group ownership of all these config files is set to root and neutron respectively. The above commands show output of root neutron.
<br/>
<br/>

Fail: If the above commands does not return any output as the user and group ownership might have set to any user other than root or any group other than neutron.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_neutron_file_ownership"/>
      </Rule>
      <Rule id="container_neutron_use_https" prodtype="rhosp13" severity="high">
        <title>Check-Neutron-04: Is secure protocol used for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols
and the communication might involve sensitive / confidential data. An attacker
may try to eavesdrop on the channel in order to get access to sensitive information.
Thus all the components must communicate with each other using a secured
communication protocol.

<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken]
section in /var/lib/config-data/puppet-generated/neutron/etc/neutron.conf
is set to https, or if value of parameter identity_uri under [keystone_authtoken]
section in /var/lib/config-data/puppet-generated/neutron/etc/neutron.conf
is set to Identity API endpoint starting with https://.

<br/>
<br/>
Fail: If value of parameter auth_protocol under [keystone_authtoken]
section in /var/lib/config-data/puppet-generated/neutron/etc/neutron.conf
is set to http`, or if value of parameter identity_uri under [keystone_authtoken]
section in /var/lib/config-data/puppet-generated/neutron/etc/neutron.conf
is not set to Identity API endpoint starting with https://.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_neutron_use_https"/>
      </Rule>
      <Rule id="container_neutron_api_use_ssl" prodtype="rhosp13" severity="high">
        <title>Check-Neutron-05: Is SSL enabled on Neutron API server?</title>
        <description>Similar to the previous check, it is recommended to enable secure communication on API server.

<br/>
<br/>
Pass: If value of parameter use_ssl under [DEFAULT] section in
/var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf is set to True.

<br/>
<br/>
Fail: If value of parameter use_ssl under [DEFAULT] section in
/var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf is set to False.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_neutron_api_use_ssl"/>
      </Rule>
      <Rule id="container_neutron_use_keystone" prodtype="rhosp13" severity="high">
        <title>Check-Neutron-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc.
If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack services
without any authentication. This could be a potential risk since an attacker might gain
unauthorized access to the OpenStack components. Thus it is strongly recommended that
all services must be authenticated with keystone using their service accounts.

<br/>
<br/>
Pass: If value of parameter auth_strategy under [DEFAULT] section in
/var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf is set to keystone.

<br/>
<br/>
Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth or noauth2.</description>
        <rationale/>
        <ref nist="IA-4(4)"/>
        <oval id="container_neutron_use_keystone"/>
      </Rule>
      <Rule id="container_neutron_file_perms" prodtype="rhosp13" severity="medium">
        <title>Check-Neutron-02: Are strict permissions set for Compute configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.

<br/>
Run the following commands:

<pre>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/neutron/etc/neutron/api-paste.ini
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/neutron/etc/neutron/policy.json
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/neutron/etc/neutron/rootwrap.conf
</pre>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates
into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;.
Note that with Check-Neutron-01: Is user/group ownership of config files set to root/neutron?
and permissions set to 640, root has read/write access and neutron has read access to these
configuration files. The access rights can also be validated using the following command.
This command will only be available on your system if it supports ACLs.
<br/>
<br/>
<pre>
$ getfacl --tabular -a /var/lib/config-data/puppet-generated/neutron/etc/neutron/neutron.conf
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
<br/>
# file: etc/neutron/neutron.conf
<br/>
USER   root     rw-
<br/>
GROUP  neutron  r--
<br/>
mask            r--
<br/>
other           ---
</pre>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_neutron_file_perms"/>
      </Rule>
    </Group>
    <Group id="nova_container" prodtype="rhosp13">
      <title>Nova Configuration Checklist</title>
      <description>Security configuration items for Nova.</description>
      <Rule id="container_nova_use_keystone" prodtype="rhosp13" severity="high">
        <title>Check-Compute-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc.
If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack
services without any authentication. This could be a potential risk since an
attacker might gain unauthorized access to the OpenStack components. Thus it
is strongly recommended that all services must be authenticated with keystone
using their service accounts.
<br/>
<br/>

Pass: If value of parameter auth_strategy under [DEFAULT] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to keystone.
<br/>
<br/>

Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth or noauth2.</description>
        <rationale/>
        <ref nist="AC-6,AC-6(1)"/>
        <oval id="container_nova_use_keystone"/>
      </Rule>
      <Rule id="container_nova_secure_glance" prodtype="rhosp13" severity="high">
        <title>Check-Compute-05: Does Nova communicates with Glance securely?</title>
        <description>OpenStack components communicate with each other using various protocols
and the communication might involve sensitive / confidential data. An attacker
may try to eavesdrop on the channel in order to get access to sensitive information.
Thus all the components must communicate with each other using a secured
communication protocol.
<br/>
<br/>

Pass: If value of parameter glance_api_insecure under [DEFAULT] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to False,
or if value of parameter api_insecure under [glance] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to False.
<br/>
<br/>

Fail: If value of parameter glance_api_insecure under [DEFAULT] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to True,
or if value of parameter api_insecure under [glance] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to True.
<br/>
<br/></description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_nova_secure_glance"/>
      </Rule>
      <Rule id="container_nova_file_perms" prodtype="rhosp13" severity="medium">
        <title>Check-Compute-02: Are strict permissions set for Compute configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>

Run the following commands:
<br/>
<pre>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/nova/etc/nova/api-paste.ini
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/nova/etc/nova/policy.json
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/nova/etc/nova/rootwrap.conf
</pre>
<br/>
<br/>

Pass: If permissions are set to 640 or stricter. The permissions of 640
translates into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;.
Note that with Check-Compute-01: Is user/group ownership of config files set to root/nova?
and permissions set to 640, root has read/write access and nova has read access to these
configuration files. The access rights can also be validated using the following command.
This command will only be available on your system if it supports ACLs.

<br/>
<pre>
$ getfacl --tabular -a /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf
getfacl: Removing leading '/' from absolute path names
# file: etc/nova/nova.conf
USER   root  rw-
GROUP  nova  r--
mask         r--
other        ---
</pre>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_nova_file_perms"/>
      </Rule>
      <Rule id="container_nova_file_ownership" prodtype="rhosp13" severity="medium">
        <title>Check-Compute-01: Is user/group ownership of config files set to root/nova?</title>
        <description>Configuration files contain critical parameters and information required for
smooth functioning of the component. If an unprivileged user, either intentionally
or accidentally modifies or deletes any of the parameters or the file itself then
it would cause severe availability issues causing a denial of service to the other
end users. Thus user ownership of such critical configuration files must be set to
root and group ownership must be set to nova.
<br/>
<br/>
Run the following commands:

<pre>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf | egrep "root nova"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/nova/etc/nova/api-paste.ini | egrep "root nova"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/nova/etc/nova/policy.json | egrep "root nova"
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/nova/etc/nova/rootwrap.conf | egrep "root nova"
</pre>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to root and
nova respectively. The above commands show output of root nova.
<br/>
<br/>

Fail: If the above commands does not return any output as the user and group
ownership might have set to any user other than root or any group other than nova.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_nova_file_ownership"/>
      </Rule>
      <Rule id="container_nova_secure_authentication" prodtype="rhosp13" severity="high">
        <title>Check-Compute-04: Is secure protocol used for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols and the
communication might involve sensitive / confidential data. An attacker may try to
eavesdrop on the channel in order to get access to sensitive information. Thus
all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to https,
or if value of parameter identity_uri under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to Identity API endpoint starting with https://.
<br/>
<br/>

Fail: If value of parameter auth_protocol under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is set to http`,
or if value of parameter identity_uri under [keystone_authtoken] section
in /var/lib/config-data/puppet-generated/nova/etc/nova/nova.conf is not
set to Identity API endpoint starting with https://.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_nova_secure_authentication"/>
      </Rule>
    </Group>
    <Group id="cinder_container" prodtype="rhosp13">
      <title>Cinder Configuration Checklist</title>
      <description>Security configuration settings for Cinder.</description>
      <Rule id="container_cinder_file_perms" prodtype="rhosp13" severity="medium">
        <title>Check-Block-02: Are strict permissions set for Compute configuration files?</title>
        <description>It is recommended to set strict access permissions for such configuration files.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/cinder/etc/cinder/api-paste.ini
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/cinder/etc/cinder/policy.json
<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/cinder/etc/cinder/rootwrap.conf
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into owner r/w, group r,
and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that with <tt>Check-Block-01: Is user/group
ownership of config files set to root/cinder?</tt> and permissions set to 640, root has read/write
access and cinder has read access to these configuration files. The access rights can also be validated
using the following command. This command will only be available on your system if it supports ACLs.

<br/>
<br/>
<pre>
$ getfacl --tabular -a /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
# file: etc/cinder/cinder.conf
<br/>
USER   root  rw-
<br/>
GROUP  cinder  r--
<br/>
mask         r--
<br/>
other        ---
</pre>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_cinder_file_perms"/>
      </Rule>
      <Rule id="container_cinder_using_keystone" prodtype="rhosp13" severity="high">
        <title>Check-Block-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc.
If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack
services without any authentication. This could be a potential risk since an
attacker might gain unauthorized access to the OpenStack components. Thus it is
strongly recommended that all services must be authenticated with keystone
using their service accounts.

<br/>
<br/>
Pass: If value of parameter auth_strategy under [DEFAULT] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to keystone.

<br/>
<br/>
Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth.</description>
        <rationale/>
        <ref nist="AC-6,AC-6(1)"/>
        <oval id="container_cinder_using_keystone"/>
      </Rule>
      <Rule id="container_cinder_osapi_max_request_body" prodtype="rhosp13" severity="medium">
        <title>Check-Block-08: Is max size for the body of a request set to default (114688)?</title>
        <description>If the maximum body size per request is not defined, the attacker can craft an arbitrary
osapi request of large size causing the service to crash and finally resulting in
Denial Of Service attack. Assigning the maximum value ensures that any malicious oversized
request gets blocked ensuring continued availability of the service.

<br/>
<br/>
Pass: If value of parameter osapi_max_request_body_size under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to <tt>114688</tt>
or if value of parameter max_request_body_size under [oslo_middleware] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to <tt>114688</tt>.

<br/>
<br/>
Fail: If value of parameter osapi_max_request_body_size under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is not set to
<tt>114688</tt> or if value of parameter max_request_body_size under [oslo_middleware]
section in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is not set to <tt>114688</tt>.</description>
        <rationale/>
        <ref nist="SC-5,SC-5(2)"/>
        <oval id="container_cinder_osapi_max_request_body"/>
      </Rule>
      <Rule id="container_cinder_glance_tls" prodtype="rhosp13" severity="high">
        <title>Check-Block-06: Does cinder communicates with glance over TLS?</title>
        <description>Similar to previous check (<tt>Check-Block-05: Does cinder communicates with nova over TLS?</tt>),
it is recommended all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter glance_api_insecure under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to False.

<br/>
<br/>
Fail: If value of parameter glance_api_insecure under [DEFAULT] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_cinder_glance_tls"/>
      </Rule>
      <Rule id="container_cinder_nas_secure_file_permissions" prodtype="rhosp13" severity="medium">
        <title>Check-Block-07: Is NAS operating in secure enviornment?</title>
        <description>Cinder supports an NFS driver which works differently than a traditional block storage driver.
The NFS driver does not actually allow an instance to access a storage device at the block level.
Instead, files are created on an NFS share and mapped to instances, which emulates a block device.
Cinder supports secure configuration for such files by controlling the file permissions when cinder
volumes are created. Cinder configuration can also control whether file operations are run as the
root user or the current OpenStack process user.\n\n<br/>\n<br/>\n

Pass: If value of parameter nas_secure_file_permissions under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to <tt>auto</tt>.

When set to auto, a check is done during cinder startup to determine if there are existing
cinder volumes, no volumes will set the option to <tt>True</tt>, and use secure file permissions.
The detection of existing volumes will set the option to <tt>False</tt>, and use the current
insecure method of handling file permissions. If value of parameter nas_secure_file_operations
under [DEFAULT] section in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf
is set to auto. When set to &#x201C;auto&#x201D;, a check is done during cinder startup to determine
if there are existing cinder volumes, no volumes will set the option to True, be secure and do
NOT run as the root user. The detection of existing volumes will set the option to False, and
use the current method of running operations as the root user. For new installations,
a &#x201C;marker file&#x201D; is written so that subsequent restarts of cinder will know what 
the original determination had been.\n\n<br/>\n<br/>\n

Fail: If value of parameter nas_secure_file_permissions under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to False
and if value of parameter nas_secure_file_operations under [DEFAULT] section
in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to False."</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_cinder_nas_secure_file_permissions"/>
      </Rule>
      <Rule id="container_cinder_file_ownership" prodtype="rhosp13" severity="medium">
        <title>Check-Block-01: Is user/group ownership of config files set to root/cinder?</title>
        <description>Configuration files contain critical parameters and information required for 
smooth functioning of the component. If an unprivileged user, either intentionally
or accidentally, modifies or deletes any of the parameters or the file itself
then it would cause severe availability issues resulting in a denial of service
to the other end users. Thus user ownership of such critical configuration files
must be set to <tt>root</tt> and group ownership must be set to <tt>cinder</tt>.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/cinder/etc/cinder/api-paste.ini | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/cinder/etc/cinder/policy.json | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/cinder/etc/cinder/rootwrap.conf | egrep "root cinder"
</tt>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to root and
cinder respectively. The above commands show output of root cinder.
<br/>
<br/>
Fail: If the above commands does not return any output as the user and group
ownership might have set to any user other than root or any group other than cinder.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_cinder_file_ownership"/>
      </Rule>
      <Rule id="container_cinder_tls_enabled" prodtype="rhosp13" severity="high">
        <title>Check-Block-04: Is TLS enabled for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols and the
communication might involve sensitive / confidential data. An attacker may try to
eavesdrop on the channel in order to get access to sensitive information. Thus
all the components must communicate with each other using a secured communication protocol.
<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to https,
or if value of parameter identity_uri under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to Identity
API endpoint starting with https:// and value of parameter insecure under the
same [keystone_authtoken] section in the same
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to False.
<br/>
<br/>
Fail: If value of parameter auth_protocol under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to http,
or if value of parameter identity_uri under [keystone_authtoken] section in
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is not set to
Identity API endpoint starting with https:// or value of parameter insecure under
the same [keystone_authtoken] section in the same
/var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_cinder_tls_enabled"/>
      </Rule>
      <Rule id="container_cinder_nova_tls" prodtype="rhosp13" severity="high">
        <title>Check-Block-05: Does cinder communicates with nova over TLS?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication
might involve sensitive / confidential data. An attacker may try to eavesdrop on the
channel in order to get access to sensitive information. Thus all the components
must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter nova_api_insecure under [DEFAULT] section in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to False.

<br/>
<br/>
Fail: If value of parameter nova_api_insecure under [DEFAULT] section in /var/lib/config-data/puppet-generated/cinder/etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_cinder_nova_tls"/>
      </Rule>
    </Group>
    <Group id="horizon_container" prodtype="rhosp13">
      <title>Horizon Configuration Checklist</title>
      <description>Recommended security configuration settings for Horizon.</description>
      <Rule id="container_horizon_use_ssl" prodtype="rhosp13" severity="high">
        <title>Check-Dashboard-03: Is USE_SSL parameter set to True?</title>
        <description>Openstack services communicate with each other using various protocols and the
communication might involve sensitive/confidential information. An attacker may
try to eavesdrop on the channel in order to get access to sensitive information.
Thus all the services must communicate with each other using a secured communication
protocol like HTTPS.
<br/>
<br/>
Pass: If value of parameter USE_SSL in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to True.
<br/>
<br/>
Fail: If value of parameter USE_SSL in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_horizon_use_ssl"/>
      </Rule>
      <Rule id="container_horizon_session_cookie_httponly" prodtype="rhosp13" severity="medium">
        <title>Check-Dashboard-06: Is SESSION_COOKIE_HTTPONLY parameter set to True?</title>
        <description>The &#x201C;HTTPONLY&#x201D; cookie attribute instructs web browsers not to allow scripts (e.g.
JavaScript or VBscript) an ability to access the cookies via the DOM document.cookie
object. This session ID protection is mandatory to prevent session ID stealing through XSS attacks.
<br/>
<br/>
Pass: If value of parameter SESSION_COOKIE_HTTPONLY in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to True.

<br/>
<br/>
Fail: If value of parameter SESSION_COOKIE_HTTPONLY in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <ref nist="SI-10"/>
        <oval id="container_horizon_session_cookie_httponly"/>
      </Rule>
      <Rule id="container_horizon_file_ownership" prodtype="rhosp13" severity="medium">
        <title>Check-Dashboard-01: Is user/group of config files set to root/horizon?</title>
        <description>Configuration files contain critical parameters and information required for
smooth functioning of the component. If an unprivileged user, either intentionally
or accidentally modifies or deletes any of the parameters or the file itself then
it would cause severe availability issues causing a denial of service to the other
end users. Thus user ownership of such critical configuration files must be set to
root and group ownership must be set to horizon.
<br/>
<br/>
Run the following commands:

<br/>
<pre>
$ stat -L -c "%U %G"  /var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings | egrep "root horizon"
</pre>
<br/>
<br/>
Pass: If user and group ownership of the config file is set to root and horizon
respectively. The above commands show output of root horizon.

<br/>
<br/>
Fail: If the above commands does not return any output as the user and group
ownership might have set to any user other than root or any group other than horizon.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_horizon_file_ownership"/>
      </Rule>
      <Rule id="container_horizon_session_cookie_secure" prodtype="rhosp13" severity="high">
        <title>Check-Dashboard-05: Is SESSION_COOKIE_SECURE parameter set to True?</title>
        <description>The &#x201C;SECURE&#x201D; cookie attribute instructs web browsers to only send the cookie through an
encrypted HTTPS (SSL/TLS) connection. This session protection mechanism is mandatory to
prevent the disclosure of the session ID through MitM (Man-in-the-Middle) attacks. It
ensures that an attacker cannot simply capture the session ID from web browser traffic.
<br/>
<br/>
Pass: If value of parameter SESSION_COOKIE_SECURE in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to True.

<br/>
<br/>
Fail: If value of parameter SESSION_COOKIE_SECURE in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_horizon_session_cookie_secure"/>
      </Rule>
      <Rule id="container_horizon_password_autocomplete" prodtype="rhosp13" severity="medium">
        <title>Check-Dashboard-07: Is password_autocomplete set to False?</title>
        <description>Common feature that applications use to provide users a convenience is to cache the password
locally in the browser (on the client machine) and having it &#x2018;pre-typed&#x2019; in all subsequent
requests. While this feature can be perceived as extremely friendly for the average user,
at the same time, it introduces a flaw, as the user account becomes easily accessible
to anyone that uses the same account on the client machine and thus may lead to compromise of the user account.
<br/>
<br/>
Pass: If value of parameter password_autocomplete in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to off.
<br/>
<br/>
Fail: If value of parameter password_autocomplete in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to on.</description>
        <rationale/>
        <ref nist="IA-5(13)"/>
        <oval id="container_horizon_password_autocomplete"/>
      </Rule>
      <Rule id="container_horizon_file_perms" prodtype="rhosp13" severity="medium">
        <title>Check-Dashboard-02: Are strict permissions set for horizon configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions
for such configuration files.
<br/>
<br/>

Run the following commands:
<br/>
<tt>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into
owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that
with <tt>Check-Dashboard-01: Is user/group of config files set to root/horizon?</tt>
and permissions set to 640, root has read/write access and horizon has read access
to these configuration files. The access rights can also be validated using the
following command. This command will only be available on your system if it supports ACLs.

<br/>
<br/>
<pre>
$ getfacl --tabular -a /var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
# file: etc/openstack-dashboard/local_settings
<br/>
USER   root     rw-
<br/>
GROUP  horizon  r--
<br/>
mask            r--
<br/>
other           ---
</pre>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_horizon_file_perms"/>
      </Rule>
      <Rule id="container_horizon_disable_password_reveal" prodtype="rhosp13" severity="low">
        <title>Check-Dashboard-08: Is disable_password_reveal set to True?</title>
        <description>Similar to the previous check, it is recommended not to reveal password fields.
<br/>
<br/>
Pass: If value of parameter disable_password_reveal in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to True.
<br/>
<br/>
Fail: If value of parameter disable_password_reveal in
/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <ref nist="IA-6"/>
        <oval id="container_horizon_disable_password_reveal"/>
      </Rule>
      <Rule id="container_horizon_csrf_cookie_secure" prodtype="rhosp13" severity="high">
        <title>Cross-Site Request Forgery Prevention: Enable CSRF_COOKIE_SECURE (containerized deployments)</title>
        <description>Usage of a secure cookie for the CSRF cookie is determined by the <tt>CSRF_COOKIE_SECURE</tt>
parameter. When Red Hat OpenStack Platform is deployed as containerized services,
this configuration setting is configured in the
<tt>/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings</tt> file.

The <tt>CSRF_COOKIE_SECURE</tt> option must be set to <tt>True</tt>:

<pre>CSRF_COOKIE_SECURE True</pre>

When <tt>CSRF_COOKIE_SECURE</tt> is set to <tt>True</tt>, the cookie will be marked
as "secure," which means web browsers may ensure that the cookie is only sent
with an HTTPS connection.</description>
        <rationale>CSRF (Cross-site request forgery) is an attack which forces an end user
to execute unauthorized commands on a web application in which he/she is
currently authenticated. A successful CSRF exploit can compromise end
user data and operations in case of normal user. If the targeted end
user has admin privileges, this can compromise the entire web application.</rationale>
        <ident cce="82166-0"/>
        <ref nist="SC-5"/>
        <oval id="container_horizon_csrf_cookie_secure"/>
        <ocil clause="CSRF_COOKIE_SECURE is set to False">Check the file <tt>/var/lib/config-data/puppet-generated/horizon/etc/openstack-dashboard/local_settings</tt> and ensure the
following line appears:
<pre>CSRF_COOKIE_SECURE True</pre></ocil>
      </Rule>
    </Group>
    <Group id="keystone_container" prodtype="rhosp13">
      <title>Keystone Configuration Checklist</title>
      <description>Security configuration recommendations for Keystone.</description>
      <Rule id="container_keystone_file_perms" prodtype="rhosp13" severity="medium">
        <title>Check-Identity-02: Are strict permissions set for Identity configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt> 
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone-paste.ini<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/policy.json<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/logging.conf<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/certs/signing_cert.pem<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/private/signing_key.pem<br/>
$ stat -L -c "%a" /var/lib/config-data/puppet-generated/keystone/var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/certs/ca.pem<br/>
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter.
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_keystone_file_perms"/>
      </Rule>
      <Rule id="container_keystone_disable_admin_token" prodtype="rhosp13" severity="high">
        <title>Check-Identity-06: Disable admin token in /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf</title>
        <description>The admin token is generally used to bootstrap Identity. This token is the most valuable
Identity asset, which could be used to gain cloud admin privileges.

<br/>
<br/>
Pass: If admin_token under [DEFAULT] section in
/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf is
disabled. And, AdminTokenAuthMiddleware under [filter:admin_token_auth] is
deleted from /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone-paste.ini

<br/>
<br/>
Fail: If admin_token under [DEFAULT] section is set and AdminTokenAuthMiddleware
exists in keystone-paste.ini.</description>
        <rationale/>
        <ref nist="IA-5(5)"/>
        <oval id="container_keystone_disable_admin_token"/>
      </Rule>
      <Rule id="container_keystone_disable_user_account_days_inactive" severity="medium">
        <title>Set Maximum Inactivity Period</title>
        <description>Keystone can be configured to disable accounts after an
organizationally-defined time period. This is achieved by configuring the
<tt>disable_user_account_days_inactive</tt> setting in the
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.</description>
        <rationale>Automatically disabling accounts ensures that users who have not
authenticated for an organizationally-defined time period are
automatically disabled. This reduces the risk of stale accounts
being used for malicious purposes.</rationale>
        <ref nist="AC-2(3)"/>
        <oval id="container_keystone_disable_user_account_days_inactive"/>
        <ocil clause="disable_user_account_days_inactive is commented out or not configured properly">Run the following command to see what the maximum authentication
attempts is:
<br/>
<pre>$ grep disable_user_account_days_inactive /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>disable_user_account_days_inactive = <sub idref="var_keystone_disable_user_account_days_inactive"/></pre></ocil>
      </Rule>
      <Rule id="container_keystone_lockout_duration" severity="medium">
        <title>Set Account Lockout Duration</title>
        <description>Once a user account is locked out, such as exceeding the
amount of logon attempts as defined by <tt>lockout_failure_attempts</tt>,
Keystone will lockout an account for the time period defined by the
<tt>lockout_duration</tt> configuration option unde the
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.
<br/>
Note that if <tt>lockout_failure_attempts</tt> is enabled and
<tt>lockout_duration</tt> is left undefined, users will be
locked out indefinitely until the user is explicitly re-enabled.</description>
        <rationale>Defining a lockout duration helps mitigate certain attacks,
such as brute force attempts. Additionally defining a lockout
duration, versus indefinately locking an account, lowers
administrative burden of re-enabling accounts of users
who accidentally triggered the maximum failure attempts.</rationale>
        <ref nist="AC-7"/>
        <oval id="container_keystone_lockout_duration"/>
        <ocil clause="lockout_duration is not configured properly">Run the following command to see what the account lockout
duration is:
<br/>
<pre>$ grep lockout_duration /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>lockout_duration=<sub idref="var_keystone_lockout_failure_duration"/></pre></ocil>
      </Rule>
      <Rule id="container_keystone_max_request_body_size" prodtype="rhosp13" severity="medium">
        <title>Check-Identity-05: Is max_request_body_size set to default (114688)?</title>
        <description>The parameter max_request_body_size defines the maximum body size per request in bytes.
If the maximum size is not defined, the attacker could craft an arbitrary request of
large size causing the service to crash and finally resulting in Denial Of Service attack.
Assigning the maximum value ensures that any malicious oversized request gets blocked
ensuring continued availability of the component.

<br/>
<br/>
Pass: If value of parameter max_request_body_size in
/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf
is set to default (114688) or some reasonable value based on your environment.

<br/>
<br/>
Fail: If value of parameter max_request_body_size is not set.</description>
        <rationale/>
        <ref nist="SC-5,SC-5(2)"/>
        <oval id="container_keystone_max_request_body_size"/>
      </Rule>
      <Rule id="container_keystone_use_ssl" prodtype="rhosp13" severity="high">
        <title>Check-Identity-03: is SSL enabled for Identity?</title>
        <description>OpenStack components communicate with each other using various protocols and the
communication might involve sensitive or confidential data. An attacker may try
to eavesdrop on the channel in order to get access to sensitive information. Thus
all the components must communicate with each other using a secured communication
protocol like HTTPS.
<br/>
<br/>
Pass: If value of parameter enable under [ssl] section in
/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf is set to True.

<br/>
<br/>
Fail: If value of parameter enable under [ssl] section is not set to True.</description>
        <rationale/>
        <ref nist="SC-8,SC-8(1)"/>
        <oval id="container_keystone_use_ssl"/>
      </Rule>
      <Rule id="container_keystone_file_ownership" prodtype="rhosp13" severity="medium">
        <title>Check-Identity-01: Is user/group ownership of config files set to keystone?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning
of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any
of the parameters or the file itself then it would cause severe availability issues causing a denial
of service to the other end users. Thus user and group ownership of such critical configuration
files must be set to that component owner.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<pre>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf | egrep "keystone keystone" <br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone-paste.ini | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/policy.json | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/logging.conf | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/certs/signing_cert.pem | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/private/signing_key.pem | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /var/lib/config-data/puppet-generated/keystone/etc/keystone/ssl/certs/ca.pem | egrep "keystone keystone"<br/>
</pre>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to keystone. The above commands show output of keystone keystone.
<br/>
<br/>
Fail: If the above commands does not return any output as the user or group ownership might have set to any user other than keystone.</description>
        <rationale/>
        <ref nist="AC-6"/>
        <oval id="container_keystone_file_ownership"/>
      </Rule>
      <Rule id="container_keystone_algorithm_hashing" prodtype="rhosp13" severity="medium">
        <title>Check-Identity-04: Does Identity use strong hashing algorithms for PKI tokens?</title>
        <description>MD5 is a weak and depreciated hashing algorithm. It can be cracked using brute force
attack. Identity tokens are sensitive and need to be protected with a stronger
hashing algorithm to prevent unauthorized disclosure and subsequent access.

<br/>
<br/>
Pass: If value of parameter hash_algorithm under [token] section in
/var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf is set to SHA256.
<br/>
<br/>

Fail: If value of parameter hash_algorithm under [token]section is set to MD5.</description>
        <rationale/>
        <ref nist="SC-13"/>
        <oval id="container_keystone_algorithm_hashing"/>
      </Rule>
      <Rule id="container_keystone_lockout_failure_attempts" severity="medium">
        <title>Set Maximum Number of Failed Authentication Attempts</title>
        <description>The account lockout feature limits the number of incorrect password
attempts. If a user fails to authenticate after the maximum number
of attempts, the service disables the user.
<br/>
The maximum number of failed authentication attempts is set by the
<tt>lockout_failure_attempts</tt> option in under the
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.</description>
        <rationale>Defining a maximum number of failed logon attempts can help
mitigate brute force password attacks.</rationale>
        <ref nist="AC-7"/>
        <oval id="container_keystone_lockout_failure_attempts"/>
        <ocil clause="lockout_failure_attempts is commented out or not configured properly">Run the following command to see what the maximum authentication
attempts is:
<br/>
<pre>$ grep lockout_failure_attempts /var/lib/config-data/puppet-generated/keystone/etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>lockout_failure_attempts=<sub idref="var_keystone_lockout_failure_attempts"/></pre></ocil>
      </Rule>
    </Group>
    <Group id="keystone" prodtype="rhosp13">
      <title>Keystone STIG Checklist</title>
      <description>High level overview of Keystone STIG settings to go here!</description>
      <Value id="var_keystone_lockout_failure_attempts" operator="less than or equal" type="string">
        <title>Maximum Number of Failed Authentication Attempts</title>
        <description>Specifies the maximum number of failed authentication attempts allowed
prior to disabling a Keystone user.</description>
        <value>6</value>
        <value selector="3">3</value>
      </Value>
      <Value id="var_keystone_lockout_duration" operator="greater than or equal" type="string">
        <title>Account Lockout Duration</title>
        <description>Specifies the time period, in seconds, of how long a user
account will be disabled after exceeding the maximum failed
logon attempts.</description>
        <value>1800</value>
        <value selector="15_minutes">900</value>
      </Value>
      <Value id="var_keystone_disable_user_account_days_inactive" operator="less than or equal" type="string">
        <title>Maximum Number of Days Since Last Authentication</title>
        <description>Specifies the maximum number of days a user has not authenticated
prior to automatically disabling the account.</description>
        <value>90</value>
        <value selector="90">90</value>
        <value selector="180">180</value>
        <value selector="45">45</value>
      </Value>
      <Rule id="keystone_file_ownership" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-01: Is user/group ownership of config files set to keystone?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user and group ownership of such critical configuration files must be set to that component owner.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt>
$ stat -L -c "%U %G" /etc/keystone/keystone.conf | egrep "keystone keystone" <br/>
$ stat -L -c "%U %G" /etc/keystone/keystone-paste.ini | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /etc/keystone/policy.json | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /etc/keystone/logging.conf | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /etc/keystone/ssl/certs/signing_cert.pem | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /etc/keystone/ssl/private/signing_key.pem | egrep "keystone keystone"<br/>
$ stat -L -c "%U %G" /etc/keystone/ssl/certs/ca.pem | egrep "keystone keystone"<br/>
</tt>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to keystone. The above commands show output of keystone keystone.
<br/>
<br/>
Fail: If the above commands does not return any output as the user or group ownership might have set to any user other than keystone.</description>
        <rationale/>
        <oval id="keystone_file_ownership"/>
      </Rule>
      <Rule id="keystone_disable_admin_token" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-06: Disable admin token in /etc/keystone/keystone.conf</title>
        <description>The admin token is generally used to bootstrap Identity. This token is the most valuable Identity asset, which could be used to gain cloud admin privileges.

<br/>
<br/>
Pass: If admin_token under [DEFAULT] section in /etc/keystone/keystone.conf is disabled. And, AdminTokenAuthMiddleware under [filter:admin_token_auth] is deleted from /etc/keystone/keystone-paste.ini

<br/>
<br/>
Fail: If admin_token under [DEFAULT] section is set and AdminTokenAuthMiddleware exists in keystone-paste.ini.</description>
        <rationale/>
        <oval id="keystone_disable_admin_token"/>
      </Rule>
      <Rule id="keystone_lockout_duration" severity="medium">
        <title>Set Account Lockout Duration</title>
        <description>Once a user account is locked out, such as exceeding the
amount of logon attempts as defined by <tt>lockout_failure_attempts</tt>,
Keystone will lockout an account for the time period defined by the
<tt>lockout_duration</tt> configuration option unde the
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.
<br/>
Note that if <tt>lockout_failure_attempts</tt> is enabled and
<tt>lockout_duration</tt> is left undefined, users will be
locked out indefinitely until the user is explicitly re-enabled.</description>
        <rationale>Defining a lockout duration helps mitigate certain attacks,
such as brute force attempts. Additionally defining a lockout
duration, versus indefinately locking an account, lowers
administrative burden of re-enabling accounts of users
who accidentally triggered the maximum failure attempts.</rationale>
        <ref nist="AC-7"/>
        <oval id="keystone_lockout_duration"/>
        <ocil clause="lockout_duration is not configured properly">Run the following command to see what the account lockout
duration is:
<br/>
<pre>$ grep lockout_duration /etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>lockout_duration=<sub idref="var_keystone_lockout_failure_duration"/></pre></ocil>
      </Rule>
      <Rule id="keystone_lockout_failure_attempts" severity="medium">
        <title>Set Maximum Number of Failed Authentication Attempts</title>
        <description>The account lockout feature limits the number of incorrect password
attempts. If a user fails to authenticate after the maximum number
of attempts, the service disables the user. 
<br/>
The maximum number of failed authentication attempts is set by the
<tt>lockout_failure_attempts</tt> option in under the
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.</description>
        <rationale>Defining a maximum number of failed logon attempts can help
mitigate brute force password attacks.</rationale>
        <ref nist="AC-7"/>
        <oval id="keystone_lockout_failure_attempts"/>
        <ocil clause="lockout_failure_attempts is commented out or not configured properly">Run the following command to see what the maximum authentication
attempts is:
<br/>
<pre>$ grep lockout_failure_attempts /etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>lockout_failure_attempts=<sub idref="var_keystone_lockout_failure_attempts"/></pre></ocil>
      </Rule>
      <Rule id="keystone_disable_user_account_days_inactive" severity="medium">
        <title>Set Maximum Inactivity Period</title>
        <description>Keystone can be configured to disable accounts after an
organizationally-defined time period. This is achieved by configuring the
<tt>disable_user_account_days_inactive</tt> setting in the 
<tt>[security_compliance]</tt> section in <tt>keystone.conf</tt>.</description>
        <rationale>Automatically disabling accounts ensures that users who have not
authenticated for an organizationally-defined time period are
automatically disabled. This reduces the risk of stale accounts
being used for malicious purposes.</rationale>
        <ref nist="AC-2(3)"/>
        <oval id="keystone_disable_user_account_days_inactive"/>
        <ocil clause="disable_user_account_days_inactive is commented out or not configured properly">Run the following command to see what the maximum authentication
attempts is:
<br/>
<pre>$ grep disable_user_account_days_inactive /etc/keystone/keystone.conf</pre>
<br/>
If properly configured, the output should be:
<pre>disable_user_account_days_inactive = <sub idref="var_keystone_disable_user_account_days_inactive"/></pre></ocil>
      </Rule>
      <Rule id="keystone_max_request_body_size" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-05: Is max_request_body_size set to default (114688)?</title>
        <description>The parameter max_request_body_size defines the maximum body size per request in bytes. If the maximum size is not defined, the attacker could craft an arbitrary request of large size causing the service to crash and finally resulting in Denial Of Service attack. Assigning the maximum value ensures that any malicious oversized request gets blocked ensuring continued availability of the component.

<br/>
<br/>
Pass: If value of parameter max_request_body_size in /etc/keystone/keystone.conf is set to default (114688) or some reasonable value based on your environment.

<br/>
<br/>
Fail: If value of parameter max_request_body_size is not set.</description>
        <rationale/>
        <oval id="keystone_max_request_body_size"/>
      </Rule>
      <Rule id="keystone_algorithm_hashing" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-04: Does Identity use strong hashing algorithms for PKI tokens?</title>
        <description>MD5 is a weak and depreciated hashing algorithm. It can be cracked using brute force attack. Identity tokens are sensitive and need to be protected with a stronger hashing algorithm to prevent unauthorized disclosure and subsequent access.

<br/>
<br/>
Pass: If value of parameter hash_algorithm under [token] section in /etc/keystone/keystone.conf is set to SHA256.
<br/>
<br/>

Fail: If value of parameter hash_algorithm under [token]section is set to MD5.</description>
        <rationale/>
        <oval id="keystone_algorithm_hashing"/>
      </Rule>
      <Rule id="keystone_file_perms" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-02: Are strict permissions set for Identity configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt> 
$ stat -L -c "%a" /etc/keystone/keystone.conf<br/>
$ stat -L -c "%a" /etc/keystone/keystone-paste.ini<br/>
$ stat -L -c "%a" /etc/keystone/policy.json<br/>
$ stat -L -c "%a" /etc/keystone/logging.conf<br/>
$ stat -L -c "%a" /etc/keystone/ssl/certs/signing_cert.pem<br/>
$ stat -L -c "%a" /etc/keystone/ssl/private/signing_key.pem<br/>
$ stat -L -c "%a" /etc/keystone/ssl/certs/ca.pem<br/>
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter.
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <oval id="keystone_file_perms"/>
      </Rule>
      <Rule id="keystone_use_ssl" prodtype="rhosp13" severity="unknown">
        <title>Check-Identity-03: is SSL enabled for Identity?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive or confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol like HTTPS.
<br/>
<br/>
Pass: If value of parameter enable under [ssl] section in /etc/keystone/keystone.conf is set to True.

<br/>
<br/>
Fail: If value of parameter enable under [ssl] section is not set to True.</description>
        <rationale/>
        <oval id="keystone_use_ssl"/>
      </Rule>
    </Group>
    <Group id="nova" prodtype="rhosp13">
      <title>Nova STIG Checklist</title>
      <description>High level overview of Nova STIG settings to go here!</description>
      <Rule id="nova_use_keystone" prodtype="rhosp13" severity="unknown">
        <title>Check-Compute-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc. If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack services without any authentication. This could be a potential risk since an attacker might gain unauthorized access to the OpenStack components. Thus it is strongly recommended that all services must be authenticated with keystone using their service accounts.
<br/>
<br/>

Pass: If value of parameter auth_strategy under [DEFAULT] section in /etc/nova/nova.conf is set to keystone.
<br/>
<br/>

Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth or noauth2.</description>
        <rationale/>
        <oval id="nova_use_keystone"/>
      </Rule>
      <Rule id="nova_file_ownership" prodtype="rhosp13" severity="unknown">
        <title>Check-Compute-01: Is user/group ownership of config files set to root/nova?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user ownership of such critical configuration files must be set to root and group ownership must be set to nova.
<br/>
<br/>
Run the following commands:

<br/>
<br/>
<tt>
$ stat -L -c "%U %G" /etc/nova/nova.conf | egrep "root nova"
<br/>
$ stat -L -c "%U %G" /etc/nova/api-paste.ini | egrep "root nova"
<br/>
$ stat -L -c "%U %G" /etc/nova/policy.json | egrep "root nova"
<br/>
$ stat -L -c "%U %G" /etc/nova/rootwrap.conf | egrep "root nova"
</tt>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to root and nova respectively. The above commands show output of root nova.
<br/>
<br/>

Fail: If the above commands does not return any output as the user and group ownership might have set to any user other than root or any group other than nova.</description>
        <rationale/>
        <oval id="nova_file_ownership"/>
      </Rule>
      <Rule id="nova_secure_authentication" prodtype="rhosp13" severity="unknown">
        <title>Check-Compute-04: Is secure protocol used for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive / confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/nova/nova.conf is set to https, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/nova/nova.conf is set to Identity API endpoint starting with https://.
<br/>
<br/>

Fail: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/nova/nova.conf is set to http`, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/nova/nova.conf is not set to Identity API endpoint starting with https://.</description>
        <rationale/>
        <oval id="nova_secure_authentication"/>
      </Rule>
      <Rule id="nova_file_perms" prodtype="rhosp13" severity="unknown">
        <title>Check-Compute-02: Are strict permissions set for Compute configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>

Run the following commands:
<br/>
<tt>
$ stat -L -c "%a" /etc/nova/nova.conf
<br/>
$ stat -L -c "%a" /etc/nova/api-paste.ini
<br/>
$ stat -L -c "%a" /etc/nova/policy.json
<br/>
$ stat -L -c "%a" /etc/nova/rootwrap.conf
</tt>
<br/>
<br/>

Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that with Check-Compute-01: Is user/group ownership of config files set to root/nova? and permissions set to 640, root has read/write access and nova has read access to these configuration files. The access rights can also be validated using the following command. This command will only be available on your system if it supports ACLs.

<br/>
<tt>
$ getfacl --tabular -a /etc/nova/nova.conf
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
# file: etc/nova/nova.conf
<br/>
USER   root  rw-
<br/>
GROUP  nova  r--
<br/>
mask         r--
<br/>
other        ---
</tt>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <oval id="nova_file_perms"/>
      </Rule>
      <Rule id="nova_secure_glance" prodtype="rhosp13" severity="unknown">
        <title>Check-Compute-05: Does Nova communicates with Glance securely?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive / confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol.
<br/>
<br/>

Pass: If value of parameter glance_api_insecure under [DEFAULT] section in /etc/nova/nova.conf is set to False, or if value of parameter api_insecure under [glance] section in /etc/nova/nova.conf is set to False.
<br/>
<br/>

Fail: If value of parameter glance_api_insecure under [DEFAULT] section in /etc/nova/nova.conf is set to True, or if value of parameter api_insecure under [glance] section in /etc/nova/nova.conf is set to True.
<br/>
<br/></description>
        <rationale/>
        <oval id="nova_secure_glance"/>
      </Rule>
    </Group>
    <Group id="horizon" prodtype="rhosp13">
      <title>Horizon STIG Checklist</title>
      <description>High level overview of Horizon STIG settings to go here!</description>
      <Rule id="horizon_password_autocomplete" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-07: Is password_autocomplete set to False?</title>
        <description>Common feature that applications use to provide users a convenience is to cache the password locally in the browser (on the client machine) and having it &#x2018;pre-typed&#x2019; in all subsequent requests. While this feature can be perceived as extremely friendly for the average user, at the same time, it introduces a flaw, as the user account becomes easily accessible to anyone that uses the same account on the client machine and thus may lead to compromise of the user account.
<br/>
<br/>
Pass: If value of parameter password_autocomplete in /etc/openstack-dashboard/local_settings is set to off.
<br/>
<br/>
Fail: If value of parameter password_autocomplete in /etc/openstack-dashboard/local_settings is set to on.</description>
        <rationale/>
        <oval id="horizon_password_autocomplete"/>
      </Rule>
      <Rule id="horizon_disable_password_reveal" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-08: Is disable_password_reveal set to True?</title>
        <description>Similar to the previous check, it is recommended not to reveal password fields.
<br/>
<br/>
Pass: If value of parameter disable_password_reveal in /etc/openstack-dashboard/local_settings is set to True.
<br/>
<br/>
Fail: If value of parameter disable_password_reveal in /etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <oval id="horizon_disable_password_reveal"/>
      </Rule>
      <Rule id="horizon_use_ssl" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-03: Is USE_SSL parameter set to True?</title>
        <description>Openstack services communicate with each other using various protocols and the communication might involve sensitive/confidential information. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the services must communicate with each other using a secured communication protocol like HTTPS.
<br/>
<br/>
Pass: If value of parameter USE_SSL in /etc/openstack-dashboard/local_settings is set to True.
<br/>
<br/>
Fail: If value of parameter USE_SSL in /etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <oval id="horizon_use_ssl"/>
      </Rule>
      <Rule id="horizon_file_ownership" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-01: Is user/group of config files set to root/horizon?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user ownership of such critical configuration files must be set to root and group ownership must be set to horizon.
<br/>
<br/>
Run the following commands:

<br/>
<tt>
$ stat -L -c "%U %G"  /etc/openstack-dashboard/local_settings | egrep "root horizon"
</tt>
<br/>
<br/>
Pass: If user and group ownership of the config file is set to root and horizon respectively. The above commands show output of root horizon.

<br/>
<br/>
Fail: If the above commands does not return any output as the user and group ownership might have set to any user other than root or any group other than horizon.</description>
        <rationale/>
        <oval id="horizon_file_ownership"/>
      </Rule>
      <Rule id="horizon_csrf_cookie_secure" prodtype="rhosp13" severity="high">
        <title>Cross-Site Request Forgery Prevention: Enable CSRF_COOKIE_SECURE (non-containerized deployments)</title>
        <description>Usage of a secure cookie for the CSRF cookie is determined by the <tt>CSRF_COOKIE_SECURE</tt>
parameter. When Red Hat OpenStack Platform is deployed as non-containerized services,
this configuration setting is configured in the
<tt>/etc/openstack-dashboard/local_settings</tt> file.

The <tt>CSRF_COOKIE_SECURE</tt> option must be set to <tt>True</tt>:

<pre>CSRF_COOKIE_SECURE True</pre>

When <tt>CSRF_COOKIE_SECURE</tt> is set to <tt>True</tt>, the cookie will be marked
as "secure," which means web browsers may ensure that the cookie is only sent
with an HTTPS connection.</description>
        <rationale>CSRF (Cross-site request forgery) is an attack which forces an end user
to execute unauthorized commands on a web application in which he/she is
currently authenticated. A successful CSRF exploit can compromise end
user data and operations in case of normal user. If the targeted end
user has admin privileges, this can compromise the entire web application.</rationale>
        <ident cce="82165-2"/>
        <ref nist="SC-5"/>
        <oval id="horizon_csrf_cookie_secure"/>
        <ocil clause="CSRF_COOKIE_SECURE is set to False">Check the file <tt>/etc/openstack-dashboard/local_settings</tt> and ensure the
following line appears:
<pre>CSRF_COOKIE_SECURE True</pre></ocil>
      </Rule>
      <Rule id="horizon_file_perms" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-02: Are strict permissions set for horizon configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>

Run the following commands:
<br/>
<tt>
$ stat -L -c "%a" /etc/openstack-dashboard/local_settings
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that with Check-Dashboard-01: Is user/group of config files set to root/horizon? and permissions set to 640, root has read/write access and horizon has read access to these configuration files. The access rights can also be validated using the following command. This command will only be available on your system if it supports ACLs.

<br/>
<br/>
<tt>
$ getfacl --tabular -a /etc/openstack-dashboard/local_settings
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
# file: etc/openstack-dashboard/local_settings
<br/>
USER   root     rw-
<br/>
GROUP  horizon  r--
<br/>
mask            r--
<br/>
other           ---
</tt>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <oval id="horizon_file_perms"/>
      </Rule>
      <Rule id="horizon_session_cookie_httponly" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-06: Is SESSION_COOKIE_HTTPONLY parameter set to True?</title>
        <description>The &#x201C;HTTPONLY&#x201D; cookie attribute instructs web browsers not to allow scripts (e.g. JavaScript or VBscript) an ability to access the cookies via the DOM document.cookie object. This session ID protection is mandatory to prevent session ID stealing through XSS attacks.
<br/>
<br/>
Pass: If value of parameter SESSION_COOKIE_HTTPONLY in /etc/openstack-dashboard/local_settings is set to True.

<br/>
<br/>
Fail: If value of parameter SESSION_COOKIE_HTTPONLY in /etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <oval id="horizon_session_cookie_httponly"/>
      </Rule>
      <Rule id="horizon_session_cookie_secure" prodtype="rhosp13" severity="unknown">
        <title>Check-Dashboard-05: Is SESSION_COOKIE_SECURE parameter set to True?</title>
        <description>The &#x201C;SECURE&#x201D; cookie attribute instructs web browsers to only send the cookie through an encrypted HTTPS (SSL/TLS) connection. This session protection mechanism is mandatory to prevent the disclosure of the session ID through MitM (Man-in-the-Middle) attacks. It ensures that an attacker cannot simply capture the session ID from web browser traffic.
<br/>
<br/>
Pass: If value of parameter SESSION_COOKIE_SECURE in /etc/openstack-dashboard/local_settings is set to True.

<br/>
<br/>
Fail: If value of parameter SESSION_COOKIE_SECURE in /etc/openstack-dashboard/local_settings is set to False.</description>
        <rationale/>
        <oval id="horizon_session_cookie_secure"/>
      </Rule>
    </Group>
    <Group id="cinder" prodtype="rhosp13">
      <title>Cinder STIG Checklist</title>
      <description>High level overview of Cinder STIG settings to go here!</description>
      <Rule id="cinder_nova_tls" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-05: Does cinder communicates with nova over TLS?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive / confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter nova_api_insecure under [DEFAULT] section in /etc/cinder/cinder.conf is set to False.

<br/>
<br/>
Fail: If value of parameter nova_api_insecure under [DEFAULT] section in /etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_nova_tls"/>
      </Rule>
      <Rule id="cinder_nas_secure_file_permissions" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-07: Is NAS operating in secure enviornment?</title>
        <description>Cinder supports an NFS driver which works differently than a traditional block storage driver. The NFS driver does not actually allow an instance to access a storage device at the block level. Instead, files are created on an NFS share and mapped to instances, which emulates a block device. Cinder supports secure configuration for such files by controlling the file permissions when cinder volumes are created. Cinder configuration can also control whether file operations are run as the root user or the current OpenStack process user.

<br/>
<br/>
Pass: If value of parameter nas_secure_file_permissions under [DEFAULT] section in /etc/cinder/cinder.conf is set to auto. When set to auto, a check is done during cinder startup to determine if there are existing cinder volumes, no volumes will set the option to True, and use secure file permissions. The detection of existing volumes will set the option to False, and use the current insecure method of handling file permissions. If value of parameter nas_secure_file_operations under [DEFAULT] section in /etc/cinder/cinder.conf is set to auto. When set to &#x201C;auto&#x201D;, a check is done during cinder startup to determine if there are existing cinder volumes, no volumes will set the option to True, be secure and do NOT run as the root user. The detection of existing volumes will set the option to False, and use the current method of running operations as the root user. For new installations, a &#x201C;marker file&#x201D; is written so that subsequent restarts of cinder will know what the original determination had been.

<br/>
<br/>
Fail: If value of parameter nas_secure_file_permissions under [DEFAULT] section in /etc/cinder/cinder.conf is set to False and if value of parameter nas_secure_file_operations under [DEFAULT] section in /etc/cinder/cinder.conf is set to False.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_nas_secure_file_permissions"/>
      </Rule>
      <Rule id="cinder_using_keystone" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc. If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack services without any authentication. This could be a potential risk since an attacker might gain unauthorized access to the OpenStack components. Thus it is strongly recommended that all services must be authenticated with keystone using their service accounts.

<br/>
<br/>
Pass: If value of parameter auth_strategy under [DEFAULT] section in /etc/cinder/cinder.conf is set to keystone.

<br/>
<br/>
Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_using_keystone"/>
      </Rule>
      <Rule id="cinder_glance_tls" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-06: Does cinder communicates with glance over TLS?</title>
        <description>Similar to previous check (Check-Block-05: Does cinder communicates with nova over TLS?), it is recommended all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter glance_api_insecure under [DEFAULT] section in /etc/cinder/cinder.conf is set to False.

<br/>
<br/>
Fail: If value of parameter glance_api_insecure under [DEFAULT] section in /etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_glance_tls"/>
      </Rule>
      <Rule id="cinder_tls_enabled" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-04: Is TLS enabled for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive / confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol.
<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/cinder/cinder.conf is set to https, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/cinder/cinder.conf is set to Identity API endpoint starting with https:// and value of parameter insecure under the same [keystone_authtoken] section in the same /etc/cinder/cinder.conf is set to False.
<br/>
<br/>
Fail: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/cinder/cinder.conf is set to http, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/cinder/cinder.conf is not set to Identity API endpoint starting with https:// or value of parameter insecure under the same [keystone_authtoken] section in the same /etc/cinder/cinder.conf is set to True.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_tls_enabled"/>
      </Rule>
      <Rule id="cinder_file_perms" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-02: Are strict permissions set for Compute configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt>
$ stat -L -c "%a" /etc/cinder/cinder.conf
<br/>
$ stat -L -c "%a" /etc/cinder/api-paste.ini
<br/>
$ stat -L -c "%a" /etc/cinder/policy.json
<br/>
$ stat -L -c "%a" /etc/cinder/rootwrap.conf
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that with Check-Block-01: Is user/group ownership of config files set to root/cinder? and permissions set to 640, root has read/write access and cinder has read access to these configuration files. The access rights can also be validated using the following command. This command will only be available on your system if it supports ACLs.

<br/>
<br/>
<tt>
$ getfacl --tabular -a /etc/cinder/cinder.conf
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
# file: etc/cinder/cinder.conf
<br/>
USER   root  rw-
<br/>
GROUP  cinder  r--
<br/>
mask         r--
<br/>
other        ---
</tt>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_file_perms"/>
      </Rule>
      <Rule id="cinder_file_ownership" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-01: Is user/group ownership of config files set to root/cinder?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally, modifies or deletes any of the parameters or the file itself then it would cause severe availability issues resulting in a denial of service to the other end users. Thus user ownership of such critical configuration files must be set to root and group ownership must be set to cinder.
<br/>
<br/>
Run the following commands:
<br/>
<br/>
<tt>
$ stat -L -c "%U %G" /etc/cinder/cinder.conf | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /etc/cinder/api-paste.ini | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /etc/cinder/policy.json | egrep "root cinder"
<br/>
$ stat -L -c "%U %G" /etc/cinder/rootwrap.conf | egrep "root cinder"
</tt>
<br/>
<br/>
Pass: If user and group ownership of all these config files is set to root and cinder respectively. The above commands show output of root cinder.
<br/>
<br/>
Fail: If the above commands does not return any output as the user and group ownership might have set to any user other than root or any group other than cinder.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_file_ownership"/>
      </Rule>
      <Rule id="cinder_osapi_max_request_body" prodtype="rhosp13" severity="unknown">
        <title>Check-Block-08: Is max size for the body of a request set to default (114688)?</title>
        <description>If the maximum body size per request is not defined, the attacker can craft an arbitrary osapi request of large size causing the service to crash and finally resulting in Denial Of Service attack. Assigning the maximum value ensures that any malicious oversized request gets blocked ensuring continued availability of the service.

<br/>
<br/>
Pass: If value of parameter osapi_max_request_body_size under [DEFAULT] section in /etc/cinder/cinder.conf is set to 114688 or if value of parameter max_request_body_size under [oslo_middleware] section in /etc/cinder/cinder.conf is set to 114688.

<br/>
<br/>
Fail: If value of parameter osapi_max_request_body_size under [DEFAULT] section in /etc/cinder/cinder.conf is not set to 114688 or if value of parameter max_request_body_size under [oslo_middleware] section in /etc/cinder/cinder.conf is not set to 114688.</description>
        <rationale/>
        <ref nist="FOO-1(a)"/>
        <oval id="cinder_osapi_max_request_body"/>
      </Rule>
    </Group>
    <Group id="neutron" prodtype="rhosp13">
      <title>Neutron STIG Checklist</title>
      <description>High level overview of Neutron STIG settings to go here!</description>
      <Rule id="neutron_file_perms" prodtype="rhosp13" severity="unknown">
        <title>Check-Neutron-02: Are strict permissions set for Compute configuration files?</title>
        <description>Similar to the previous check, it is recommended to set strict access permissions for such configuration files.

<br/>
<br/>
Run the following commands:

<br/>
<br/>
<tt>
$ stat -L -c "%a" /etc/neutron/neutron.conf
<br/>
$ stat -L -c "%a" /etc/neutron/api-paste.ini
<br/>
$ stat -L -c "%a" /etc/neutron/policy.json
<br/>
$ stat -L -c "%a" /etc/neutron/rootwrap.conf
</tt>
<br/>
<br/>
Pass: If permissions are set to 640 or stricter. The permissions of 640 translates into owner r/w, group r, and no rights to others i.e. &#x201C;u=rw,g=r,o=&#x201D;. Note that with Check-Neutron-01: Is user/group ownership of config files set to root/neutron? and permissions set to 640, root has read/write access and neutron has read access to these configuration files. The access rights can also be validated using the following command. This command will only be available on your system if it supports ACLs.
<br/>
<br/>
<tt>
$ getfacl --tabular -a /etc/neutron/neutron.conf
<br/>
getfacl: Removing leading '/' from absolute path names
<br/>
<br/>
# file: etc/neutron/neutron.conf
<br/>
USER   root     rw-
<br/>
GROUP  neutron  r--
<br/>
mask            r--
<br/>
other           ---
</tt>
<br/>
<br/>
Fail: If permissions are not set to at least 640.</description>
        <rationale/>
        <oval id="neutron_file_perms"/>
      </Rule>
      <Rule id="neutron_use_keystone" prodtype="rhosp13" severity="unknown">
        <title>Check-Neutron-03: Is keystone used for authentication?</title>
        <description>OpenStack supports various authentication strategies like noauth, keystone etc. If the &#x2018;noauth&#x2019; strategy is used then the users could interact with OpenStack services without any authentication. This could be a potential risk since an attacker might gain unauthorized access to the OpenStack components. Thus it is strongly recommended that all services must be authenticated with keystone using their service accounts.

<br/>
<br/>
Pass: If value of parameter auth_strategy under [DEFAULT] section in /etc/neutron/neutron.conf is set to keystone.

<br/>
<br/>
Fail: If value of parameter auth_strategy under [DEFAULT] section is set to noauth or noauth2.</description>
        <rationale/>
        <oval id="neutron_use_keystone"/>
      </Rule>
      <Rule id="neutron_use_https" prodtype="rhosp13" severity="unknown">
        <title>Check-Neutron-04: Is secure protocol used for authentication?</title>
        <description>OpenStack components communicate with each other using various protocols and the communication might involve sensitive / confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol.

<br/>
<br/>
Pass: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/neutron/neutron.conf is set to https, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/neutron/neutron.conf is set to Identity API endpoint starting with https://.

<br/>
<br/>
Fail: If value of parameter auth_protocol under [keystone_authtoken] section in /etc/neutron/neutron.conf is set to http`, or if value of parameter identity_uri under [keystone_authtoken] section in /etc/neutron/neutron.conf is not set to Identity API endpoint starting with https://.</description>
        <rationale/>
        <oval id="neutron_use_https"/>
      </Rule>
      <Rule id="neutron_api_use_ssl" prodtype="rhosp13" severity="unknown">
        <title>Check-Neutron-05: Is SSL enabled on Neutron API server?</title>
        <description>Similar to the previous check, it is recommended to enable secure communication on API server.

<br/>
<br/>
Pass: If value of parameter use_ssl under [DEFAULT] section in /etc/neutron/neutron.conf is set to True.

<br/>
<br/>
Fail: If value of parameter use_ssl under [DEFAULT] section in /etc/neutron/neutron.conf is set to False.</description>
        <rationale/>
        <oval id="neutron_api_use_ssl"/>
      </Rule>
      <Rule id="neutron_file_ownership" prodtype="rhosp13" severity="unknown">
        <title>Check-Neutron-01: Is user/group ownership of config files set to root/neutron?</title>
        <description>Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user ownership of such critical configuration files must be set to root and group ownership must be set to neutron.
<br/>
<br/>
Run the following commands:

<br/>
<br/>
$ stat -L -c "%U %G" /etc/neutron/neutron.conf | egrep "root neutron"
$ stat -L -c "%U %G" /etc/neutron/api-paste.ini | egrep "root neutron"
$ stat -L -c "%U %G" /etc/neutron/policy.json | egrep "root neutron"
$ stat -L -c "%U %G" /etc/neutron/rootwrap.conf | egrep "root neutron"
Pass: If user and group ownership of all these config files is set to root and neutron respectively. The above commands show output of root neutron.
<br/>
<br/>

Fail: If the above commands does not return any output as the user and group ownership might have set to any user other than root or any group other than neutron.</description>
        <rationale/>
        <oval id="neutron_file_ownership"/>
      </Rule>
    </Group>
  </Group>
  <Group id="intro">
    <title>Introduction</title>
    <description>The purpose of this guidance is to provide security configuration
recommendations and baselines for Red Hat OpenStack Platform 13.
The guide is intended for system and/or application administrators. Readers are assumed to
possess basic system administration skills for the application's operating systems, as well
as some familiarity with the product's documentation and administration
conventions. Some instructions within this guide are complex.
All directions should be followed completely and with understanding of
their effects in order to avoid serious adverse effects on the system
and its security.</description>
    <Group id="general-principles">
      <title>General Principles</title>
      <description>The following general principles motivate much of the advice in this
guide and should also influence any configuration decisions that are
not explicitly covered.</description>
      <Group id="principle-least-privilege">
        <title>Least Privilege</title>
        <description>Grant the least privilege necessary for user accounts and software to perform tasks.
For example, <tt>sudo</tt> can be implemented to limit authorization to super user
accounts on the system only to designated personnel. Another example is to limit
logins on server systems to only those administrators who need to log into them in
order to perform administration tasks.</description>
      </Group>
      <Group id="principle-use-security-tools">
        <title>Configure Security Tools to Improve System Robustness</title>
        <description>Several tools exist which can be effectively used to improve a system's
resistance to and detection of unknown attacks. These tools can improve
robustness against attack at the cost of relatively little configuration
effort.</description>
      </Group>
      <Group id="principle-separate-servers">
        <title>Run Different Network Services on Separate Systems</title>
        <description>Whenever possible, a server should be dedicated to serving exactly one
network service. This limits the number of other services that can
be compromised in the event that an attacker is able to successfully
exploit a software flaw in one network service.</description>
      </Group>
      <Group id="principle-encrypt-transmitted-data">
        <title>Encrypt Transmitted Data Whenever Possible</title>
        <description>Data transmitted over a network, whether wired or wireless, is susceptible
to passive monitoring. Whenever practical solutions for encrypting
such data exist, they should be applied. Even if data is expected to
be transmitted only over a local network, it should still be encrypted.
Encrypting authentication data, such as passwords, is particularly
important. Networks of Red Hat OpenStack Platform 13 machines can and should be configured
so that no unencrypted authentication data is ever transmitted between
machines.</description>
      </Group>
    </Group>
    <Group id="how-to-use">
      <title>How to Use This Guide</title>
      <description>Readers should heed the following points when using the guide.</description>
      <Group id="intro-formatting-conventions">
        <title>Formatting Conventions</title>
        <description>Commands intended for shell execution, as well as configuration file text,
are featured in a <tt>monospace font</tt>. <i>Italics</i> are used
to indicate instances where the system administrator must substitute
the appropriate information into a command or configuration file.</description>
      </Group>
      <Group id="intro-test-non-production">
        <title>Test in Non-Production Environment</title>
        <description>This guidance should always be tested in a non-production environment
before deployment. This test environment should simulate the setup in
which the system will be deployed as closely as possible.</description>
      </Group>
      <Group id="intro-read-sections-completely">
        <title>Read Sections Completely and in Order</title>
        <description>Each section may build on information and recommendations discussed in
prior sections. Each section should be read and understood completely;
instructions should never be blindly applied. Relevant discussion may
occur after instructions for an action.</description>
      </Group>
      <Group id="intro-root-shell-assumed">
        <title>Root Shell Environment Assumed</title>
        <description>Most of the actions listed in this document are written with the
assumption that they will be executed by the root user running the
<tt>/bin/bash</tt> shell. Commands preceded with a hash mark (#)
assume that the administrator will execute the commands as root, i.e.
apply the command via <tt>sudo</tt> whenever possible, or use
<tt>su</tt> to gain root privileges if <tt>sudo</tt> cannot be
used. Commands which can be executed as a non-root user are are preceded
by a dollar sign ($) prompt.</description>
      </Group>
      <Group id="intro-reboot-required">
        <title>Reboot Required</title>
        <description>A system or service reboot is implicitly required after some actions in order to
complete the reconfiguration of the system. In many cases, the changes
will not take effect until a reboot is performed. In order to ensure
that changes are applied properly and to test functionality, always
reboot the system after applying a set of recommendations from this guide.</description>
      </Group>
    </Group>
  </Group>
  <Group id="openshift" prodtype="ocp3,ocp4">
    <title>OpenShift Settings</title>
    <description>Each section of this configuration guide includes information about the default configuration
of an OpenShift cluster and a set of recommendations for hardening the configuration. For each
hardening recommendation, information on how to implement the control and/or how to verify or audit
the control is provided. In some cases, remediation information is also provided.

Many of the settings in the hardening guide are in place by default. The audit information for these
settings is provided in order to verify that the cluster admininstrator has not made changes that
would be less secure than the OpenShift defaults. A small number of items require configuration.

Finally, there are some recommendations that require decisions by the system operator, such as audit
log size, retention, and related settings.</description>
    <Group id="scheduler" prodtype="ocp3">
      <title>OpenShift - Kubernetes - Scheduler Settings</title>
      <description>Contains evaluations for kube-scheduler configuration settings.</description>
    </Group>
    <Group id="general" prodtype="ocp3">
      <title>OpenShift - General Security Practices</title>
      <description>Contains evaluations for general security practices for operating an OpenShift environment.</description>
    </Group>
    <Group id="kubelet" prodtype="ocp3">
      <title>Kubernetes Kubelet Settings</title>
      <description>The Kubernetes Kubelet is an agent that runs on each node in the cluster. It
makes sure that containers are running in a pod.

The kubelet takes a set of PodSpecs that are provided through various
mechanisms and ensures that the containers described in those PodSpecs are
running and healthy. The kubelet doesn&#x2019;t manage containers which were not
created by Kubernetes.</description>
      <Value id="var_kube_authorization_mode" type="string">
        <title>kubelet - Authorization Options</title>
        <description>ABAC - Attribute-Based Access Control (ABAC) mode allows you to configure policies using local files.
<br/>RBAC - Role-based access control (RBAC) mode allows you to create and store policies using the Kubernetes API.
<br/>Webhook - WebHook is an HTTP callback mode that allows you to manage authorization using a remote REST endpoint.
<br/>Node Node - authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.
<br/>AlwaysDeny - This flag blocks all requests. Use this flag only for testing.</description>
        <value selector="node">Node</value>
        <value selector="abac">ABAC</value>
        <value selector="rbac">RBAC</value>
        <value>Webhook</value>
        <value selector="webhook">Webhook</value>
        <value selector="alwaysdeny">AlwaysDeny</value>
      </Value>
      <Value id="var_streaming_connection_timeouts" interactive="true" type="string">
        <title>Streaming Connection Timeout Options</title>
        <description>Time until connection timeouts. Use (s) for seconds, (m) for minutes,
and (h) for hours.</description>
        <value selector="10min">10m</value>
        <value>5m</value>
        <value selector="30min">30m</value>
        <value selector="5min">5m</value>
        <value selector="2hours">2h</value>
        <value selector="6hours">6h</value>
        <value selector="4hours">4h</value>
        <value selector="1hour">1h</value>
        <value selector="8hours">8h</value>
      </Value>
    </Group>
    <Group id="controller" prodtype="ocp3">
      <title>OpenShift Controller Settings</title>
      <description>This section contains recommendations for the kube-controller-manager configuration</description>
    </Group>
    <Group id="etcd" prodtype="ocp3">
      <title>OpenShift etcd Settings</title>
      <description>Contains rules that check correct OpenShift etcd settings.</description>
    </Group>
    <Group id="ocp-permissions" prodtype="ocp3,ocp4">
      <title>Permissions</title>
      <description>Traditional security relies heavily on file and
directory permissions to prevent unauthorized users from reading or
modifying files to which they should not have access.</description>
      <Group id="ocp-files" prodtype="ocp3,ocp4">
        <title>Verify Permissions on Important Files and
Directories</title>
        <description>Permissions for many files on a system must be set
restrictively to ensure sensitive information is properly protected.
This section discusses important
permission restrictions which can be verified
to ensure that no harmful discrepancies have
arisen.</description>
      </Group>
    </Group>
    <Group id="api-server" prodtype="ocp3">
      <title>OpenShift API Server</title>
      <description>This section contains recommendations for kube-apiserver configuration.</description>
    </Group>
  </Group>
</Benchmark>
